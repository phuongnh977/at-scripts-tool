{
  "collection": {
    "_": {
      "postman_id": "newman-at-api-001"
    },
    "item": [
      {
        "id": "eeaa97bc-4664-4bf6-b249-391a3d72b438",
        "name": "Health Check",
        "item": [
          {
            "id": "9d5142da-2170-49f5-9c86-793e375c395f",
            "name": "API Health",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b6f374e1-e04a-4c67-858f-a9f205a8a206",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has correct structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData.status).to.eql('ok');",
                    "});"
                  ],
                  "_lastExecutionId": "b36a93b0-6b0c-4673-9b59-c4d185fe241f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
        "name": "Collections API",
        "item": [
          {
            "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
            "name": "Get All Collections",
            "request": {
              "url": {
                "path": [
                  "collections"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "// Save collection count for later tests",
                    "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                  ],
                  "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                }
              }
            ]
          },
          {
            "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
            "name": "Upload Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "collection",
                    "type": "file",
                    "src": "{{testCollectionContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid collection",
                    "const testCollection = {",
                    "    \"info\": {",
                    "        \"_postman_id\": \"test-\" + Date.now(),",
                    "        \"name\": \"Test Collection\",",
                    "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                    "    },",
                    "    \"item\": [",
                    "        {",
                    "            \"name\": \"Test Request\",",
                    "            \"request\": {",
                    "                \"method\": \"GET\",",
                    "                \"url\": \"https://example.com\"",
                    "            }",
                    "        }",
                    "    ]",
                    "};",
                    "",
                    "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                  ],
                  "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                }
              }
            ]
          },
          {
            "id": "fcfaac82-0de4-4105-865b-51337bee257a",
            "name": "Get Specific Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid collection JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('info');",
                    "    pm.expect(jsonData).to.have.property('item');",
                    "});"
                  ],
                  "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                }
              }
            ]
          },
          {
            "id": "e21661f7-3173-496b-b560-73359f40b221",
            "name": "Update Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5272e819-4247-4308-a499-df0c67167aba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                }
              }
            ]
          },
          {
            "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
            "name": "Delete Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
        "name": "Environments API",
        "item": [
          {
            "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
            "name": "Get All Environments",
            "request": {
              "url": {
                "path": [
                  "environments"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                }
              }
            ]
          },
          {
            "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
            "name": "Upload Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "environment",
                    "type": "file",
                    "src": "{{testEnvironmentContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid environment",
                    "const testEnvironment = {",
                    "    \"id\": \"test-env-\" + Date.now(),",
                    "    \"name\": \"Test Environment\",",
                    "    \"values\": [",
                    "        {",
                    "            \"key\": \"test_var\",",
                    "            \"value\": \"test_value\",",
                    "            \"enabled\": true",
                    "        }",
                    "    ],",
                    "    \"_postman_variable_scope\": \"environment\"",
                    "};",
                    "",
                    "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                  ],
                  "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                }
              }
            ]
          },
          {
            "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
            "name": "Get Specific Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid environment JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('values');",
                    "    pm.expect(jsonData.values).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                }
              }
            ]
          },
          {
            "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
            "name": "Update Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                }
              }
            ]
          },
          {
            "id": "a965d6b0-d242-4b60-b030-491daeef9656",
            "name": "Delete Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "778a6709-d901-4def-a0e0-0a6ac9ae7720",
        "name": "Newman Runner API",
        "item": [
          {
            "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
            "name": "Run Collection (Simple)",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
                }
              }
            ]
          },
          {
            "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
            "name": "Run Collection with Environment",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "ca524093-816d-4ca7-b7dd-16f421a5daac",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "9917680f-ae8a-47c6-a518-63d7b27a4043"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "4bd5a208-2ee8-451c-a109-3b6d7402d98b",
          "type": "text/javascript",
          "exec": [
            "// Log response for debugging",
            "console.log('Response:', pm.response.text());"
          ],
          "_lastExecutionId": "8367f2d7-12fd-4335-b4b2-d39392950511"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "uploaded_collection_filename"
      },
      {
        "type": "any",
        "value": "",
        "key": "uploaded_environment_filename"
      },
      {
        "type": "any",
        "value": "0",
        "key": "initial_collection_count"
      }
    ],
    "info": {
      "_postman_id": "newman-at-api-001",
      "name": "Newman AT Backend API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete test suite for Newman AT backend API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-01-29T12:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "newman-at-local",
    "name": "Newman AT Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "/api",
        "key": "api_prefix"
      },
      {
        "type": "any",
        "value": "test-collection.json",
        "key": "test_collection_name"
      },
      {
        "type": "any",
        "value": "test-environment.json",
        "key": "test_environment_name"
      }
    ]
  },
  "globals": {
    "id": "23966c9a-2efc-4a31-8e96-2e4fd2ea5ff7",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 11.846153846153847,
      "responseMin": 4,
      "responseMax": 61,
      "responseSd": 14.314307817146583,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753803018144,
      "completed": 1753803019441
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0158b2b9-d496-452d-8961-44dfbaa8c7e7",
          "httpRequestId": "d27a0a37-8d3f-4b62-bb3e-b90e93ecebe4"
        },
        "item": {
          "id": "9d5142da-2170-49f5-9c86-793e375c395f",
          "name": "API Health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6f374e1-e04a-4c67-858f-a9f205a8a206",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "_lastExecutionId": "b36a93b0-6b0c-4673-9b59-c4d185fe241f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "588a1880-af72-44cc-acb8-cc611deee63c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a218746c-75b6-4b14-a48e-5a5a34a640b2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "52"
            },
            {
              "key": "ETag",
              "value": "W/\"34-7Y+GhsSQxyujdSDn37Y/Tuy9mo8\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 61,
          "responseSize": 52
        },
        "id": "9d5142da-2170-49f5-9c86-793e375c395f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "09f70701-5002-487b-8b70-93d2d40f9750",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e116cbda-6e4c-4a4d-a7b0-84ce39261403"
        },
        "item": {
          "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
          "name": "Get All Collections",
          "request": {
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save collection count for later tests",
                  "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                ],
                "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b6c6af7-d4d7-4725-9a06-0252989a06ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2a3ebf91-38f2-4588-ad3e-376f4903a575",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 189
        },
        "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "20cc3ae7-ffe7-4a6b-96ed-f8e1ff264189",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f82b8f41-f682-43a6-92cb-9de91bcab0a3"
        },
        "item": {
          "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2bf4fe0a-498b-4695-90fd-b1efa64d9882",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "collection",
                "type": "file",
                "src": "{\"info\":{\"_postman_id\":\"test-1753803018494\",\"name\":\"Test Collection\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},\"item\":[{\"name\":\"Test Request\",\"request\":{\"method\":\"GET\",\"url\":\"https://example.com\"}}]}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "0a2d9643-818a-4ddc-ac4b-361d35390c31",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 28
        },
        "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4c744470-2200-42bf-8587-58dbcda2024e",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "24e86101-3a87-4f28-99f8-578530d2e6dc"
        },
        "item": {
          "id": "fcfaac82-0de4-4105-865b-51337bee257a",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4797aaa1-06ee-485a-83b1-6f53f743b1f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a56f0636-e7cb-4f54-a5a9-2ce5e17ba9df",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 189
        },
        "id": "fcfaac82-0de4-4105-865b-51337bee257a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid collection JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid collection JSON",
              "message": "expected [ { …(4) } ] to have property 'info'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b241dd34-d5bf-4e83-9910-c83c49eea417",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e5abee37-96ee-46d8-8127-9fc8c3106a72"
        },
        "item": {
          "id": "e21661f7-3173-496b-b560-73359f40b221",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5272e819-4247-4308-a499-df0c67167aba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "413e233f-0683-4468-8e02-f445df52cb2f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "401",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
          }
        },
        "response": {
          "id": "f1d39f60-81e8-484d-9d18-d24551bf8f9c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "e21661f7-3173-496b-b560-73359f40b221",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2e03de1b-a10e-4a4a-a50d-4348d5452a54",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3428fa27-4ba0-492d-9ef0-3f4aecd253cf"
        },
        "item": {
          "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7fb1ddbe-7768-4fe3-9b98-63f3e7b91363",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "219c73b0-cc8b-4e75-bab6-3d0db0b5fb87",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "25b24120-8cba-411b-a670-fc4dcd6ab528",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e187a47d-0c18-4dc1-b075-b88e5ddadd43"
        },
        "item": {
          "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
          "name": "Get All Environments",
          "request": {
            "url": {
              "path": [
                "environments"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6f9d828c-67cc-4192-8926-96b7f29014e7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "06b7428d-22d1-4c8c-bbc5-5cf6fd1e2824",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 124
        },
        "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba9e44ad-2b5e-456d-8f36-643d5920d5fa",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64b529bc-8a31-44a2-849d-5525ba0c8408"
        },
        "item": {
          "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ef82156f-9012-4be8-9ff6-94db793c7961",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "environment",
                "type": "file",
                "src": "{\"id\":\"test-env-1753803018943\",\"name\":\"Test Environment\",\"values\":[{\"key\":\"test_var\",\"value\":\"test_value\",\"enabled\":true}],\"_postman_variable_scope\":\"environment\"}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "5d6eb705-94dc-4881-bbf3-e502a8e3e207",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:18 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 28
        },
        "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "86736267-94e9-4854-8e6f-0701c66a6857",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "050198f4-9807-4bcb-b162-f1820dbceac8"
        },
        "item": {
          "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a9065ead-ccda-4fb2-a58f-34ed705e204f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ecd5a9e4-4266-4e60-9924-cebc97c4e898",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:19 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 124
        },
        "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid environment JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid environment JSON",
              "message": "expected [ { …(4) } ] to have property 'name'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ed62309-814c-4f18-a889-e016bde1f41c",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "caf6ba1a-fe2c-4898-9134-355c3d66ce70"
        },
        "item": {
          "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d2b06a2-0338-44db-a3bd-801d0303a12a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
          }
        },
        "response": {
          "id": "3edaa754-ac12-47d2-856f-51eade810634",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:19 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4d426aa8-a5cc-4de8-a965-f64f97ca52a5",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4a953307-f5d9-499e-abed-3cd462e13ec1"
        },
        "item": {
          "id": "a965d6b0-d242-4b60-b030-491daeef9656",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b6c29b86-74f5-41f2-b1e5-ecca4c828bef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "bea4ffa5-112b-4709-86af-123a592acbe8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:19 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "a965d6b0-d242-4b60-b030-491daeef9656",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "eae7838b-5730-4afb-9e08-5ebd4ccc3307",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "17be7038-171c-4e3f-8067-af53c940df2e"
        },
        "item": {
          "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "985fd2ce-ed96-40e5-87b3-b1d27f77c3e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
          }
        },
        "response": {
          "id": "60fbe82f-ca3d-44b5-925d-f8c56d08ee38",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:19 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 39
        },
        "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e98b0900-9b98-4681-84e0-3085a1215c86",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6d29988-6acc-48af-aa5e-8fd7f59ab788"
        },
        "item": {
          "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a437709e-af1a-418d-8907-4f24e4b0d11b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
          }
        },
        "response": {
          "id": "073556af-c4be-41e3-aeb4-5f7d2028efa6",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:30:19 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 39
        },
        "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 932
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "63f5089d6fd02906ce2997a7c9efa585",
          "id": "7faf6beb-43b7-4f78-a890-676aab22ade7",
          "timestamp": 1753803018559,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20cc3ae7-ffe7-4a6b-96ed-f8e1ff264189",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f82b8f41-f682-43a6-92cb-9de91bcab0a3",
          "scriptId": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
          "execution": "890881bd-c518-4682-b370-ee861c1a10f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "46064d093507c0d4645d67b1b46d48e8",
          "id": "7e52ded2-87e0-43e7-bd3e-da9c7035f270",
          "timestamp": 1753803018568,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20cc3ae7-ffe7-4a6b-96ed-f8e1ff264189",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f82b8f41-f682-43a6-92cb-9de91bcab0a3",
          "scriptId": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
          "execution": "890881bd-c518-4682-b370-ee861c1a10f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid collection JSON",
          "message": "expected [ { …(4) } ] to have property 'info'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "7b7af146ef773fbc28a338f861c32c7c",
          "id": "81991025-d5ad-4c84-89bf-58e9f890a581",
          "timestamp": 1753803018647,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fcfaac82-0de4-4105-865b-51337bee257a",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4c744470-2200-42bf-8587-58dbcda2024e",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "24e86101-3a87-4f28-99f8-578530d2e6dc",
          "scriptId": "632734a4-4577-4e07-ab80-4892442e8aa0",
          "execution": "911c5d93-019f-4cea-8b1a-8b705c230072"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "8f57821a-12a7-40ef-91c7-defca4d198bd",
          "timestamp": 1753803018753,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e21661f7-3173-496b-b560-73359f40b221",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5272e819-4247-4308-a499-df0c67167aba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b241dd34-d5bf-4e83-9910-c83c49eea417",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e5abee37-96ee-46d8-8127-9fc8c3106a72",
          "scriptId": "5272e819-4247-4308-a499-df0c67167aba",
          "execution": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7036f88a4a44402bd7e60eab9a26d6c9",
          "id": "fbdcea45-5812-41fb-8637-d8617577ab67",
          "timestamp": 1753803018757,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e21661f7-3173-496b-b560-73359f40b221",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5272e819-4247-4308-a499-df0c67167aba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b241dd34-d5bf-4e83-9910-c83c49eea417",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e5abee37-96ee-46d8-8127-9fc8c3106a72",
          "scriptId": "5272e819-4247-4308-a499-df0c67167aba",
          "execution": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "b8cead54-a564-47fd-b514-5a055a362202",
          "timestamp": 1753803018840,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2e03de1b-a10e-4a4a-a50d-4348d5452a54",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3428fa27-4ba0-492d-9ef0-3f4aecd253cf",
          "scriptId": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
          "execution": "ea46e35a-9c00-418d-875d-35b092db442e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d2f339d7dbd0c03b86a114a828087760",
          "id": "330b236f-7e32-4f51-9ecd-a40f35f9de61",
          "timestamp": 1753803018843,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
              }
            }
          ]
        },
        "parent": {
          "id": "db5f03f6-83f1-4420-96dc-0ee0dcf71053",
          "name": "Collections API",
          "item": [
            {
              "id": "5bf3a571-c122-4224-8389-516692dc6fd2",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da417183-9cc4-4063-b581-597a45bac6c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "8ddf6ba2-0b11-41ee-9554-554a30a1fb48"
                  }
                }
              ]
            },
            {
              "id": "44603fae-a5cf-409d-814a-f5de53e9a3a3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8a9b2800-245f-4d66-81ab-5110840f7272",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "188a190c-eaf0-40df-9620-83d678e12989"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcb80436-c28b-4784-88ed-ac0a5d9fbcd1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "890881bd-c518-4682-b370-ee861c1a10f9"
                  }
                }
              ]
            },
            {
              "id": "fcfaac82-0de4-4105-865b-51337bee257a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "632734a4-4577-4e07-ab80-4892442e8aa0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "911c5d93-019f-4cea-8b1a-8b705c230072"
                  }
                }
              ]
            },
            {
              "id": "e21661f7-3173-496b-b560-73359f40b221",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5272e819-4247-4308-a499-df0c67167aba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "46fa32ae-1c24-4a77-9a34-ab1eb9aa68fc"
                  }
                }
              ]
            },
            {
              "id": "dd5ed40a-7ff2-4fc4-ae1c-f32cee08f173",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "ea46e35a-9c00-418d-875d-35b092db442e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2e03de1b-a10e-4a4a-a50d-4348d5452a54",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3428fa27-4ba0-492d-9ef0-3f4aecd253cf",
          "scriptId": "ed3dcebe-1223-41b2-844b-c4a8ed503caa",
          "execution": "ea46e35a-9c00-418d-875d-35b092db442e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "8cb9304106fb962ca9e8cb3646c1d6ef",
          "id": "8d6a8d85-6362-4978-9896-438b46c38e65",
          "timestamp": 1753803018997,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ba9e44ad-2b5e-456d-8f36-643d5920d5fa",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64b529bc-8a31-44a2-849d-5525ba0c8408",
          "scriptId": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
          "execution": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "a5eadbbaddf7057a07e38b97e74398e0",
          "id": "7db99cf7-e9aa-4e88-8156-20bfa030d902",
          "timestamp": 1753803018999,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ba9e44ad-2b5e-456d-8f36-643d5920d5fa",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64b529bc-8a31-44a2-849d-5525ba0c8408",
          "scriptId": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
          "execution": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid environment JSON",
          "message": "expected [ { …(4) } ] to have property 'name'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7df9f205c516f1042fa18e4e11bec77a",
          "id": "10b02bba-18c5-4e01-83e9-0b22a6408983",
          "timestamp": 1753803019078,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "86736267-94e9-4854-8e6f-0701c66a6857",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "050198f4-9807-4bcb-b162-f1820dbceac8",
          "scriptId": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
          "execution": "56093889-8589-4b12-b4b5-95e82d6d0929"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "51f62f97358e839673dfe407246b1342",
          "id": "0e251cbd-dfaa-40fb-ad60-c6c50eca0ffd",
          "timestamp": 1753803019160,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8ed62309-814c-4f18-a889-e016bde1f41c",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "caf6ba1a-fe2c-4898-9134-355c3d66ce70",
          "scriptId": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
          "execution": "1a9546aa-3a98-400a-89fa-806ba98dc669"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d06ee42f55ae9a2a884c04d8f23271b7",
          "id": "f4f64153-c3a4-4183-b958-f3c8d178ef3b",
          "timestamp": 1753803019162,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8ed62309-814c-4f18-a889-e016bde1f41c",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "caf6ba1a-fe2c-4898-9134-355c3d66ce70",
          "scriptId": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
          "execution": "1a9546aa-3a98-400a-89fa-806ba98dc669"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d3dd5545e58f581c4635dfe9af03c35",
          "id": "f4304da7-08d9-4e16-81af-cd4b3d103cc6",
          "timestamp": 1753803019251,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a965d6b0-d242-4b60-b030-491daeef9656",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4d426aa8-a5cc-4de8-a965-f64f97ca52a5",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4a953307-f5d9-499e-abed-3cd462e13ec1",
          "scriptId": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
          "execution": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "949aaae4b4c63428fbeba46992d75766",
          "id": "27cdb501-0f7b-4fa9-a257-35b36e6e8ba2",
          "timestamp": 1753803019253,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a965d6b0-d242-4b60-b030-491daeef9656",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
              }
            }
          ]
        },
        "parent": {
          "id": "2dc05bc0-ca89-4dfb-99f3-594367897c92",
          "name": "Environments API",
          "item": [
            {
              "id": "ee3ddc02-7baf-4245-9c17-a68a48a45d66",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc868d72-5f82-4d01-b5aa-935c751d8c67",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "34ed4e8e-0386-4054-9ef5-337dfb5ff821"
                  }
                }
              ]
            },
            {
              "id": "9d96b337-36d0-47c3-b695-3cac9908d8d5",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "924356e6-7a7e-4047-90ff-91c139a93e6a",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6b9ecea6-1a7c-4e81-a179-9d82f01618db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8e119fea-f9f5-4e57-8d79-d1f5ee79bd28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "fcc31bea-4a76-40e5-aa48-287a2415c10b"
                  }
                }
              ]
            },
            {
              "id": "1e2cb33a-510a-4686-8c5f-8a8829ddda5c",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4a2d9be-9df5-449b-aaf6-cff20d21c041",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "56093889-8589-4b12-b4b5-95e82d6d0929"
                  }
                }
              ]
            },
            {
              "id": "9c95bf44-42d2-4b0b-b32d-c468470abb34",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4a34e8b-cdd6-49f3-98ef-6d2320ba7ddf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "1a9546aa-3a98-400a-89fa-806ba98dc669"
                  }
                }
              ]
            },
            {
              "id": "a965d6b0-d242-4b60-b030-491daeef9656",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4d426aa8-a5cc-4de8-a965-f64f97ca52a5",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4a953307-f5d9-499e-abed-3cd462e13ec1",
          "scriptId": "d1cf8804-bd45-40d7-9cab-78b02f54cdcd",
          "execution": "deb4812e-91ba-4936-85fa-f6ad8ee76137"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5aee59275ad77079b548135c9cd9ff77",
          "id": "163cf2fb-eb3e-489d-b023-991fc245e5ba",
          "timestamp": 1753803019339,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
              }
            }
          ]
        },
        "parent": {
          "id": "778a6709-d901-4def-a0e0-0a6ac9ae7720",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
                  }
                }
              ]
            },
            {
              "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eae7838b-5730-4afb-9e08-5ebd4ccc3307",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "17be7038-171c-4e3f-8067-af53c940df2e",
          "scriptId": "ea879433-dc25-4b37-b0b8-044237e50940",
          "execution": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "6b1b7c09d4201b021e9a59d1ea55f105",
          "id": "e728ea16-3cf6-4cff-be7b-ee96f82c27f2",
          "timestamp": 1753803019342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
              }
            }
          ]
        },
        "parent": {
          "id": "778a6709-d901-4def-a0e0-0a6ac9ae7720",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
                  }
                }
              ]
            },
            {
              "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eae7838b-5730-4afb-9e08-5ebd4ccc3307",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "17be7038-171c-4e3f-8067-af53c940df2e",
          "scriptId": "ea879433-dc25-4b37-b0b8-044237e50940",
          "execution": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6e2b98e8ac16282d2c9d967bf41d9711",
          "id": "c52ea3d8-b0ed-44c8-987b-e65bf8184717",
          "timestamp": 1753803019419,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
              }
            }
          ]
        },
        "parent": {
          "id": "778a6709-d901-4def-a0e0-0a6ac9ae7720",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
                  }
                }
              ]
            },
            {
              "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e98b0900-9b98-4681-84e0-3085a1215c86",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6d29988-6acc-48af-aa5e-8fd7f59ab788",
          "scriptId": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
          "execution": "040fae43-e955-4557-b54e-887fdc8cbc2d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "14a8181d7cde2a146a8dde2c5ab7afd2",
          "id": "20bb92e8-b689-4863-b5af-b694dd1bd6b6",
          "timestamp": 1753803019421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
              }
            }
          ]
        },
        "parent": {
          "id": "778a6709-d901-4def-a0e0-0a6ac9ae7720",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "8fd06885-f325-4bdd-be0f-9de4843b9755",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea879433-dc25-4b37-b0b8-044237e50940",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "bcfa3513-ce06-42e7-9fd7-389c8637d865"
                  }
                }
              ]
            },
            {
              "id": "6b41dc79-c037-4031-96a0-890a26ebbeab",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "040fae43-e955-4557-b54e-887fdc8cbc2d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e98b0900-9b98-4681-84e0-3085a1215c86",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6d29988-6acc-48af-aa5e-8fd7f59ab788",
          "scriptId": "888a24b7-346f-463b-9ebb-4905aae5ac0a",
          "execution": "040fae43-e955-4557-b54e-887fdc8cbc2d"
        }
      }
    ],
    "error": null
  }
}