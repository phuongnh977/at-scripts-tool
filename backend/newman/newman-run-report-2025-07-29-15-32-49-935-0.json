{
  "collection": {
    "_": {
      "postman_id": "newman-at-api-001"
    },
    "item": [
      {
        "id": "aa39c193-9583-4ea5-8cea-f4abfb00efe2",
        "name": "Health Check",
        "item": [
          {
            "id": "877ff352-fd03-485d-9c51-511b5e2981ae",
            "name": "API Health",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4ed87649-a6b5-48eb-b383-6a59de2d328c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has correct structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData.status).to.eql('ok');",
                    "});"
                  ],
                  "_lastExecutionId": "df69cdc5-ab45-492f-9b73-a162fd7a1d92"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
        "name": "Collections API",
        "item": [
          {
            "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
            "name": "Get All Collections",
            "request": {
              "url": {
                "path": [
                  "collections"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "// Save collection count for later tests",
                    "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                  ],
                  "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                }
              }
            ]
          },
          {
            "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
            "name": "Upload Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "collection",
                    "type": "file",
                    "src": "{{testCollectionContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid collection",
                    "const testCollection = {",
                    "    \"info\": {",
                    "        \"_postman_id\": \"test-\" + Date.now(),",
                    "        \"name\": \"Test Collection\",",
                    "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                    "    },",
                    "    \"item\": [",
                    "        {",
                    "            \"name\": \"Test Request\",",
                    "            \"request\": {",
                    "                \"method\": \"GET\",",
                    "                \"url\": \"https://example.com\"",
                    "            }",
                    "        }",
                    "    ]",
                    "};",
                    "",
                    "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                  ],
                  "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                }
              }
            ]
          },
          {
            "id": "16740aa9-9525-434e-8146-ca1db674204a",
            "name": "Get Specific Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid collection JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('info');",
                    "    pm.expect(jsonData).to.have.property('item');",
                    "});"
                  ],
                  "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                }
              }
            ]
          },
          {
            "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
            "name": "Update Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e2564423-2178-493d-af78-de6819ece4ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                }
              }
            ]
          },
          {
            "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
            "name": "Delete Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2416d986-e4e5-456b-9f23-617226439b8c",
        "name": "Environments API",
        "item": [
          {
            "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
            "name": "Get All Environments",
            "request": {
              "url": {
                "path": [
                  "environments"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                }
              }
            ]
          },
          {
            "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
            "name": "Upload Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "environment",
                    "type": "file",
                    "src": "{{testEnvironmentContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid environment",
                    "const testEnvironment = {",
                    "    \"id\": \"test-env-\" + Date.now(),",
                    "    \"name\": \"Test Environment\",",
                    "    \"values\": [",
                    "        {",
                    "            \"key\": \"test_var\",",
                    "            \"value\": \"test_value\",",
                    "            \"enabled\": true",
                    "        }",
                    "    ],",
                    "    \"_postman_variable_scope\": \"environment\"",
                    "};",
                    "",
                    "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                  ],
                  "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                }
              }
            ]
          },
          {
            "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
            "name": "Get Specific Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid environment JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('values');",
                    "    pm.expect(jsonData.values).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                }
              }
            ]
          },
          {
            "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
            "name": "Update Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                }
              }
            ]
          },
          {
            "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
            "name": "Delete Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1a819ec9-a922-48df-ae3d-b2a59841f5a9",
        "name": "Newman Runner API",
        "item": [
          {
            "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
            "name": "Run Collection (Simple)",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
                }
              }
            ]
          },
          {
            "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
            "name": "Run Collection with Environment",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "64084a4c-6ca6-4802-ae29-4bc5b8db2af1",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "7903b0f0-22a4-4cf5-b69b-1202a67764d3"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "f7c4a59a-c4a0-442e-a34f-151d592bcdb2",
          "type": "text/javascript",
          "exec": [
            "// Log response for debugging",
            "console.log('Response:', pm.response.text());"
          ],
          "_lastExecutionId": "b2507769-bc34-4fec-8555-8ba6110f29e7"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "uploaded_collection_filename"
      },
      {
        "type": "any",
        "value": "",
        "key": "uploaded_environment_filename"
      },
      {
        "type": "any",
        "value": "0",
        "key": "initial_collection_count"
      }
    ],
    "info": {
      "_postman_id": "newman-at-api-001",
      "name": "Newman AT Backend API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete test suite for Newman AT backend API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-01-29T12:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "newman-at-local",
    "name": "Newman AT Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "/api",
        "key": "api_prefix"
      },
      {
        "type": "any",
        "value": "test-collection.json",
        "key": "test_collection_name"
      },
      {
        "type": "any",
        "value": "test-environment.json",
        "key": "test_environment_name"
      }
    ]
  },
  "globals": {
    "id": "af63fc23-4b97-40c9-8c9e-88193cb49277",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 9.76923076923077,
      "responseMin": 4,
      "responseMax": 53,
      "responseSd": 12.680414007763467,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753803168851,
      "completed": 1753803169925
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e59a2a56-8fb6-4c7b-ae8c-4bfb35c34a46",
          "httpRequestId": "7d3998c5-3578-4200-8070-a3dab1e712a7"
        },
        "item": {
          "id": "877ff352-fd03-485d-9c51-511b5e2981ae",
          "name": "API Health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ed87649-a6b5-48eb-b383-6a59de2d328c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "_lastExecutionId": "df69cdc5-ab45-492f-9b73-a162fd7a1d92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "87326be2-d033-4400-b022-2ffc128aa0cc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1a22ed3d-529b-4f35-b351-aac9a3dca688",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "52"
            },
            {
              "key": "ETag",
              "value": "W/\"34-7Y+GhsSQxyujdSDn37Y/Tuy9mo8\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:48 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 53,
          "responseSize": 52
        },
        "id": "877ff352-fd03-485d-9c51-511b5e2981ae",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1711794f-ad9f-4fe2-abf6-7048c35ffbdf",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "59a0ca88-6c9b-4ef5-8720-c4fa89f179c1"
        },
        "item": {
          "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
          "name": "Get All Collections",
          "request": {
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save collection count for later tests",
                  "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                ],
                "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56d4941d-cbda-4217-9516-6f8fa4377b75",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b75fba7f-61d9-477a-8966-c7f89730cfa4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 189
        },
        "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c92680c3-5a93-467d-94f5-60043aa15fa2",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a8c3747-4f95-4f77-8451-89952a848997"
        },
        "item": {
          "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9dd844de-4d97-4677-ab05-757de67a1b3e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "collection",
                "type": "file",
                "src": "{\"info\":{\"_postman_id\":\"test-1753803169106\",\"name\":\"Test Collection\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},\"item\":[{\"name\":\"Test Request\",\"request\":{\"method\":\"GET\",\"url\":\"https://example.com\"}}]}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "15dcf4ad-72c7-4932-ba68-67884f9c5872",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 28
        },
        "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b2a6d1d4-8ebc-4550-86f0-d68527b6bf04",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2acf5d16-2b44-4d91-b53a-456ee44f1091"
        },
        "item": {
          "id": "16740aa9-9525-434e-8146-ca1db674204a",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "31832d3c-141f-4246-8b9f-a5072df80bd7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "281be328-95ee-44c0-b34e-7d24604cf297",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 189
        },
        "id": "16740aa9-9525-434e-8146-ca1db674204a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid collection JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid collection JSON",
              "message": "expected [ { …(4) } ] to have property 'info'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "539a41ee-ec22-4351-be95-ba5028c5a353",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a376f9de-e281-4ea2-a0a2-ae284c496d96"
        },
        "item": {
          "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2564423-2178-493d-af78-de6819ece4ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f2b5bac-1867-4971-97ea-c63c82d3d632",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "401",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
          }
        },
        "response": {
          "id": "92fce632-96f2-41ff-a101-259cd3d6d46c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f111ca93-9ef9-4389-b9a8-d25853c4ddde",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d50ca06a-7756-465c-830f-ed7661afc3da"
        },
        "item": {
          "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fccef35f-1a76-4916-b74a-5d6f32055e9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "3a980006-89e7-46b1-872d-7288dd5fb4c1",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8f47628-a31e-41d8-a6f8-66e653287ea8",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fcb39330-e317-4213-b5b4-dd2342d622d0"
        },
        "item": {
          "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
          "name": "Get All Environments",
          "request": {
            "url": {
              "path": [
                "environments"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "705997ba-f131-4d3f-b526-ee4366b5627e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "610351df-2d0f-4b92-b50f-da383f50583f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 124
        },
        "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d94831a-8087-4e56-856f-b00cba269674",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "83152dae-aa18-4001-acee-055a60dbc29a"
        },
        "item": {
          "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4dd9f361-09a3-48ab-96cf-29a43c6c6ee2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "environment",
                "type": "file",
                "src": "{\"id\":\"test-env-1753803169492\",\"name\":\"Test Environment\",\"values\":[{\"key\":\"test_var\",\"value\":\"test_value\",\"enabled\":true}],\"_postman_variable_scope\":\"environment\"}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "14ea0dc7-5fb5-4977-9619-8056431814c9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 28
        },
        "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3671313d-6905-494c-adac-7bbe3a3feada",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d49737b4-5caf-4658-a1fd-6fb4e753e33f"
        },
        "item": {
          "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4702937b-7611-45f0-bacd-234fb8183776",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "983a4c02-c813-4eaf-886a-ceb0a35f4e29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 124
        },
        "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid environment JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid environment JSON",
              "message": "expected [ { …(4) } ] to have property 'name'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f2ba68e8-0569-46d1-97c4-8511e630b262",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "826c2c34-2cb1-42c9-b00e-5fc8b28a21a5"
        },
        "item": {
          "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "94262551-723e-45b7-8088-167861deaf62",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
          }
        },
        "response": {
          "id": "b303840e-2f0d-4b74-9c5e-0278ba3e69aa",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "105b38b2-a6da-42ff-98ac-ca99720cf3ea",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fdbf301b-ca83-465b-877c-cc99f78a9d44"
        },
        "item": {
          "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eab829ae-84e5-478a-8ed9-3f4c9b8258d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "1d90cce9-2196-4dd3-a7c7-5034cae9fd76",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7e5267e1-8227-4f4f-a8c9-d24decdedeb6",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68b2a9b7-a421-497b-ade5-0e85631730f2"
        },
        "item": {
          "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b160ea0-8e69-4357-b154-d22b4e93ebe9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
          }
        },
        "response": {
          "id": "71091023-74fd-4088-8821-675cc64b54d6",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 39
        },
        "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c8fb555f-5917-4d52-9181-b270df607b56",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6bcf00b6-eaef-4afb-8893-b4af7c9af4e9"
        },
        "item": {
          "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de02b534-c89c-42ad-8472-6e13e6481da0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
          }
        },
        "response": {
          "id": "0616c35d-5356-403a-aa01-41e0a9effa2b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:32:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 39
        },
        "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 932
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "63f5089d6fd02906ce2997a7c9efa585",
          "id": "2a21e4e0-5c6c-411e-ad97-05e106a585a7",
          "timestamp": 1753803169167,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c92680c3-5a93-467d-94f5-60043aa15fa2",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a8c3747-4f95-4f77-8451-89952a848997",
          "scriptId": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
          "execution": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "46064d093507c0d4645d67b1b46d48e8",
          "id": "9f02656f-12cc-4dae-970e-7c908f743c28",
          "timestamp": 1753803169173,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c92680c3-5a93-467d-94f5-60043aa15fa2",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a8c3747-4f95-4f77-8451-89952a848997",
          "scriptId": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
          "execution": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid collection JSON",
          "message": "expected [ { …(4) } ] to have property 'info'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "7b7af146ef773fbc28a338f861c32c7c",
          "id": "3c575442-1b1a-4b73-8f56-90f97e85a075",
          "timestamp": 1753803169241,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "16740aa9-9525-434e-8146-ca1db674204a",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b2a6d1d4-8ebc-4550-86f0-d68527b6bf04",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2acf5d16-2b44-4d91-b53a-456ee44f1091",
          "scriptId": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
          "execution": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "817ef60a-a5ed-4815-b7c5-7255b1ee90dd",
          "timestamp": 1753803169305,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2564423-2178-493d-af78-de6819ece4ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "539a41ee-ec22-4351-be95-ba5028c5a353",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a376f9de-e281-4ea2-a0a2-ae284c496d96",
          "scriptId": "e2564423-2178-493d-af78-de6819ece4ca",
          "execution": "943e5ffb-6de3-4c49-be71-172f1f33a575"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7036f88a4a44402bd7e60eab9a26d6c9",
          "id": "d929f846-a837-4370-8d01-dc5f06f3353c",
          "timestamp": 1753803169307,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2564423-2178-493d-af78-de6819ece4ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "539a41ee-ec22-4351-be95-ba5028c5a353",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a376f9de-e281-4ea2-a0a2-ae284c496d96",
          "scriptId": "e2564423-2178-493d-af78-de6819ece4ca",
          "execution": "943e5ffb-6de3-4c49-be71-172f1f33a575"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "9ed52336-b179-4858-b120-0260e5fa7042",
          "timestamp": 1753803169379,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f111ca93-9ef9-4389-b9a8-d25853c4ddde",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d50ca06a-7756-465c-830f-ed7661afc3da",
          "scriptId": "70f4948a-0951-4d67-9811-77ea777c927d",
          "execution": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d2f339d7dbd0c03b86a114a828087760",
          "id": "2d94763b-36a3-456e-9a1b-015f02d07da3",
          "timestamp": 1753803169381,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
              }
            }
          ]
        },
        "parent": {
          "id": "8a4aebb0-19b1-4047-ace1-2f6a5e6437fa",
          "name": "Collections API",
          "item": [
            {
              "id": "f36dbd86-ca00-4ffb-a911-00e2c48a5783",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5ad8e0a-db24-46da-a8d5-24b8ac300c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "cde2d4b9-64b4-440f-83af-b4e0d40f13b1"
                  }
                }
              ]
            },
            {
              "id": "1f1e754c-80f6-4d5d-a178-44c676300e2d",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f30b966c-7a9e-4463-8002-34e0655c092f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4c23e0b4-9656-4555-bece-d78821a6bf34"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b2a7f10-e96c-4d5f-ab18-b8e5b381be32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "d0ab6f91-3a4c-4dc6-a567-8a4e4d4ea6ba"
                  }
                }
              ]
            },
            {
              "id": "16740aa9-9525-434e-8146-ca1db674204a",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7be0fd28-7dcb-4c1b-9a9f-de0d9c9e6501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "4ea6303b-9b73-4d31-8922-c383d7798a6d"
                  }
                }
              ]
            },
            {
              "id": "533aaee7-f4cf-4001-b981-6455b611ab67",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e2564423-2178-493d-af78-de6819ece4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "943e5ffb-6de3-4c49-be71-172f1f33a575"
                  }
                }
              ]
            },
            {
              "id": "05baacbe-0c8e-4849-89c3-32eb7df7b838",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70f4948a-0951-4d67-9811-77ea777c927d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f111ca93-9ef9-4389-b9a8-d25853c4ddde",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d50ca06a-7756-465c-830f-ed7661afc3da",
          "scriptId": "70f4948a-0951-4d67-9811-77ea777c927d",
          "execution": "98c7cc5c-366e-4ad9-b4b5-679f474fa86a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "8cb9304106fb962ca9e8cb3646c1d6ef",
          "id": "4d41dfdc-90c3-4ccd-b696-3ece4007b192",
          "timestamp": 1753803169537,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d94831a-8087-4e56-856f-b00cba269674",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "83152dae-aa18-4001-acee-055a60dbc29a",
          "scriptId": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
          "execution": "4c1cae79-d3da-4134-a4c9-80921922249e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "a5eadbbaddf7057a07e38b97e74398e0",
          "id": "7a1ce1c1-60d3-4771-a011-963cbad9947e",
          "timestamp": 1753803169539,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d94831a-8087-4e56-856f-b00cba269674",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "83152dae-aa18-4001-acee-055a60dbc29a",
          "scriptId": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
          "execution": "4c1cae79-d3da-4134-a4c9-80921922249e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid environment JSON",
          "message": "expected [ { …(4) } ] to have property 'name'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7df9f205c516f1042fa18e4e11bec77a",
          "id": "98a3da22-417f-4259-8dde-b4c6c6790f4a",
          "timestamp": 1753803169614,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3671313d-6905-494c-adac-7bbe3a3feada",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d49737b4-5caf-4658-a1fd-6fb4e753e33f",
          "scriptId": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
          "execution": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "51f62f97358e839673dfe407246b1342",
          "id": "6eda64cb-4b49-4b55-b236-1ddc5c80cce6",
          "timestamp": 1753803169684,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f2ba68e8-0569-46d1-97c4-8511e630b262",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "826c2c34-2cb1-42c9-b00e-5fc8b28a21a5",
          "scriptId": "712065c3-52a5-4cc6-a5fc-13837a740170",
          "execution": "0c9df664-3c69-413d-8881-435cfdadd86b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d06ee42f55ae9a2a884c04d8f23271b7",
          "id": "a892b93d-77e3-4fd5-859b-331d46f0fa4d",
          "timestamp": 1753803169685,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f2ba68e8-0569-46d1-97c4-8511e630b262",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "826c2c34-2cb1-42c9-b00e-5fc8b28a21a5",
          "scriptId": "712065c3-52a5-4cc6-a5fc-13837a740170",
          "execution": "0c9df664-3c69-413d-8881-435cfdadd86b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d3dd5545e58f581c4635dfe9af03c35",
          "id": "786f9b6c-862e-43e0-be0b-bc55393c5d2a",
          "timestamp": 1753803169761,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "105b38b2-a6da-42ff-98ac-ca99720cf3ea",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fdbf301b-ca83-465b-877c-cc99f78a9d44",
          "scriptId": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
          "execution": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "949aaae4b4c63428fbeba46992d75766",
          "id": "ebe1fbf7-9ed4-49ce-8d11-5b3c57d560ed",
          "timestamp": 1753803169762,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
              }
            }
          ]
        },
        "parent": {
          "id": "2416d986-e4e5-456b-9f23-617226439b8c",
          "name": "Environments API",
          "item": [
            {
              "id": "4295cebb-cddd-4be1-b1d5-b3f6a6250535",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd449543-70f3-48f2-be72-6794616d61f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e903e485-e169-4735-9d75-46a4a8d713ea"
                  }
                }
              ]
            },
            {
              "id": "36412ee8-5d8c-4710-ae78-bfa0cd761bf7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "217fd6a9-b622-443d-acd1-ad24bec59ca0",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "1bbe7fd5-e039-4ebb-80e1-6039b29d1d50"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e43fce82-4305-4de9-aa45-105e9e95b6e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "4c1cae79-d3da-4134-a4c9-80921922249e"
                  }
                }
              ]
            },
            {
              "id": "9b897ce5-2e9d-48ec-a7ed-ac40fcb6db72",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c04ebe0e-0280-4d88-ba2d-47a0765a4b73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "9e15ab1a-dd81-4c65-9bdb-30627617acb3"
                  }
                }
              ]
            },
            {
              "id": "ae4b0be4-63b0-43fe-803f-fcce0478aed4",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712065c3-52a5-4cc6-a5fc-13837a740170",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "0c9df664-3c69-413d-8881-435cfdadd86b"
                  }
                }
              ]
            },
            {
              "id": "4678e31e-8a8c-446f-87ca-febebfb15fb3",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "105b38b2-a6da-42ff-98ac-ca99720cf3ea",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fdbf301b-ca83-465b-877c-cc99f78a9d44",
          "scriptId": "1e414a27-bff5-4e02-80b3-434ba4d227fd",
          "execution": "c1f4592d-d80b-4c22-a256-f9e06fc18f4d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5aee59275ad77079b548135c9cd9ff77",
          "id": "98429771-f7ff-4dd9-99fb-54ea44b76498",
          "timestamp": 1753803169833,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
              }
            }
          ]
        },
        "parent": {
          "id": "1a819ec9-a922-48df-ae3d-b2a59841f5a9",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
                  }
                }
              ]
            },
            {
              "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e5267e1-8227-4f4f-a8c9-d24decdedeb6",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68b2a9b7-a421-497b-ade5-0e85631730f2",
          "scriptId": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
          "execution": "2e9c361e-41b5-422b-bc51-821832bfa623"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "6b1b7c09d4201b021e9a59d1ea55f105",
          "id": "57383021-7413-4f5b-9961-4672f2e5bab8",
          "timestamp": 1753803169835,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
              }
            }
          ]
        },
        "parent": {
          "id": "1a819ec9-a922-48df-ae3d-b2a59841f5a9",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
                  }
                }
              ]
            },
            {
              "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7e5267e1-8227-4f4f-a8c9-d24decdedeb6",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68b2a9b7-a421-497b-ade5-0e85631730f2",
          "scriptId": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
          "execution": "2e9c361e-41b5-422b-bc51-821832bfa623"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6e2b98e8ac16282d2c9d967bf41d9711",
          "id": "640af82e-4acd-4b67-8e3f-4627dd500159",
          "timestamp": 1753803169904,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
              }
            }
          ]
        },
        "parent": {
          "id": "1a819ec9-a922-48df-ae3d-b2a59841f5a9",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
                  }
                }
              ]
            },
            {
              "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c8fb555f-5917-4d52-9181-b270df607b56",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6bcf00b6-eaef-4afb-8893-b4af7c9af4e9",
          "scriptId": "a47f0c72-1275-4689-8c76-c9a3160465ae",
          "execution": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "14a8181d7cde2a146a8dde2c5ab7afd2",
          "id": "c7b04175-41d7-472c-99c1-c7bd3972841b",
          "timestamp": 1753803169906,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
              }
            }
          ]
        },
        "parent": {
          "id": "1a819ec9-a922-48df-ae3d-b2a59841f5a9",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "f4be71b9-8792-47d3-9bc2-9c561f46585a",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddfecdb5-a09a-441a-80e2-fdda8c3609cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "2e9c361e-41b5-422b-bc51-821832bfa623"
                  }
                }
              ]
            },
            {
              "id": "4d1aeb8f-be6f-4dc9-99c7-2c4e978f095d",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a47f0c72-1275-4689-8c76-c9a3160465ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c8fb555f-5917-4d52-9181-b270df607b56",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6bcf00b6-eaef-4afb-8893-b4af7c9af4e9",
          "scriptId": "a47f0c72-1275-4689-8c76-c9a3160465ae",
          "execution": "a462391f-f1b8-47f7-aaa2-1821fe10e5a3"
        }
      }
    ],
    "error": null
  }
}