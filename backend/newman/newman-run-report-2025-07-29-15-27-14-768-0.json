{
  "collection": {
    "_": {
      "postman_id": "newman-at-api-001"
    },
    "item": [
      {
        "id": "6cea9beb-82c3-4ace-987b-c5cecb03d628",
        "name": "Health Check",
        "item": [
          {
            "id": "4c74cb9d-a107-4959-88f6-fda20368c9ee",
            "name": "API Health",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0c1a0ba8-4062-4fd6-97e2-e634a3aa6c4f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has correct structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData.status).to.eql('ok');",
                    "});"
                  ],
                  "_lastExecutionId": "53b0bd73-befe-44a5-962c-e4a68890fa3e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
        "name": "Collections API",
        "item": [
          {
            "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
            "name": "Get All Collections",
            "request": {
              "url": {
                "path": [
                  "collections"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "// Save collection count for later tests",
                    "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                  ],
                  "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                }
              }
            ]
          },
          {
            "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
            "name": "Upload Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "collection",
                    "type": "file",
                    "src": "{{testCollectionContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid collection",
                    "const testCollection = {",
                    "    \"info\": {",
                    "        \"_postman_id\": \"test-\" + Date.now(),",
                    "        \"name\": \"Test Collection\",",
                    "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                    "    },",
                    "    \"item\": [",
                    "        {",
                    "            \"name\": \"Test Request\",",
                    "            \"request\": {",
                    "                \"method\": \"GET\",",
                    "                \"url\": \"https://example.com\"",
                    "            }",
                    "        }",
                    "    ]",
                    "};",
                    "",
                    "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                  ],
                  "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                }
              }
            ]
          },
          {
            "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
            "name": "Get Specific Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid collection JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('info');",
                    "    pm.expect(jsonData).to.have.property('item');",
                    "});"
                  ],
                  "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                }
              }
            ]
          },
          {
            "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
            "name": "Update Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eedff904-9169-4a92-839c-a69424c39254",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                }
              }
            ]
          },
          {
            "id": "65979ae1-227c-4ab1-9824-521042b8c445",
            "name": "Delete Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
        "name": "Environments API",
        "item": [
          {
            "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
            "name": "Get All Environments",
            "request": {
              "url": {
                "path": [
                  "environments"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                }
              }
            ]
          },
          {
            "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
            "name": "Upload Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "environment",
                    "type": "file",
                    "src": "{{testEnvironmentContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid environment",
                    "const testEnvironment = {",
                    "    \"id\": \"test-env-\" + Date.now(),",
                    "    \"name\": \"Test Environment\",",
                    "    \"values\": [",
                    "        {",
                    "            \"key\": \"test_var\",",
                    "            \"value\": \"test_value\",",
                    "            \"enabled\": true",
                    "        }",
                    "    ],",
                    "    \"_postman_variable_scope\": \"environment\"",
                    "};",
                    "",
                    "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                  ],
                  "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                }
              }
            ]
          },
          {
            "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
            "name": "Get Specific Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid environment JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('values');",
                    "    pm.expect(jsonData.values).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                }
              }
            ]
          },
          {
            "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
            "name": "Update Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                }
              }
            ]
          },
          {
            "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
            "name": "Delete Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "27ace122-b777-48f0-843c-500db65d641e",
        "name": "Newman Runner API",
        "item": [
          {
            "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
            "name": "Run Collection (Simple)",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
                }
              }
            ]
          },
          {
            "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
            "name": "Run Collection with Environment",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "fa3c5320-58d4-41ef-9a3c-00ce25a32ca1",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "f4dfe4a9-eedb-4cc7-8989-770a49b8a2b5"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "74dafdf6-47b9-4322-9858-16eb17c25968",
          "type": "text/javascript",
          "exec": [
            "// Log response for debugging",
            "console.log('Response:', pm.response.text());"
          ],
          "_lastExecutionId": "5fb6bde9-69e2-4382-9f42-fd4ccfe9d85e"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "uploaded_collection_filename"
      },
      {
        "type": "any",
        "value": "",
        "key": "uploaded_environment_filename"
      },
      {
        "type": "any",
        "value": "0",
        "key": "initial_collection_count"
      }
    ],
    "info": {
      "_postman_id": "newman-at-api-001",
      "name": "Newman AT Backend API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete test suite for Newman AT backend API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-01-29T12:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "newman-at-local",
    "name": "Newman AT Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "/api",
        "key": "api_prefix"
      },
      {
        "type": "any",
        "value": "test-collection.json",
        "key": "test_collection_name"
      },
      {
        "type": "any",
        "value": "test-environment.json",
        "key": "test_environment_name"
      }
    ]
  },
  "globals": {
    "id": "bd968947-6d6b-4f26-a748-05ba4ae9188e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 9.923076923076923,
      "responseMin": 4,
      "responseMax": 53,
      "responseSd": 12.529727963536827,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753802833491,
      "completed": 1753802834751
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d2b2b5cd-775d-4a3f-a984-75cb0b3e8edd",
          "httpRequestId": "7a5b1ec7-9e8b-4bea-9c1a-ef4cca89e524"
        },
        "item": {
          "id": "4c74cb9d-a107-4959-88f6-fda20368c9ee",
          "name": "API Health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c1a0ba8-4062-4fd6-97e2-e634a3aa6c4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "_lastExecutionId": "53b0bd73-befe-44a5-962c-e4a68890fa3e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1027970f-a160-49d2-be77-a3fa1dcce20b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c320523b-7281-49a1-bdd6-825d2ebe3f5a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "52"
            },
            {
              "key": "ETag",
              "value": "W/\"34-7Y+GhsSQxyujdSDn37Y/Tuy9mo8\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 53,
          "responseSize": 52
        },
        "id": "4c74cb9d-a107-4959-88f6-fda20368c9ee",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a925bee2-3ce2-4a06-8783-4d03e700256b",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7c23d272-c5a6-467c-a5d1-f4d0432e8a51"
        },
        "item": {
          "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
          "name": "Get All Collections",
          "request": {
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save collection count for later tests",
                  "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                ],
                "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d3f15b3-929c-42f6-9869-3bf369314cb4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b5a9db79-8744-4a9f-be2c-b2220da06cec",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 189
        },
        "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "194f9fb1-b3f4-47bd-b5a6-0e3db69885d6",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "72596931-0168-4976-8d5c-4e3f323ebf82"
        },
        "item": {
          "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "329f16a7-e802-4920-869a-5ccab089e597",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "collection",
                "type": "file",
                "src": "{\"info\":{\"_postman_id\":\"test-1753802833786\",\"name\":\"Test Collection\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},\"item\":[{\"name\":\"Test Request\",\"request\":{\"method\":\"GET\",\"url\":\"https://example.com\"}}]}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "84dd481d-a853-450b-b22e-db896009cb50",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 28
        },
        "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6e9dbfb-3fe7-489b-8a80-4baa11ba1b26",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1170b500-7cb5-43fa-a5e2-8fdaaaacbeb7"
        },
        "item": {
          "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02a7ba9d-3f71-494a-9b5d-1eeebdb31407",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2ca8439d-28fe-45a3-8854-4e6f76d1873e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 189
        },
        "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid collection JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid collection JSON",
              "message": "expected [ { …(4) } ] to have property 'info'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3047e5c-1325-4212-afc6-e6b66bccca13",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5bb0091-68ee-4d02-a1b5-758c971692e4"
        },
        "item": {
          "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedff904-9169-4a92-839c-a69424c39254",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "06213678-5313-4772-aabb-1c8b14beab18",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "401",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
          }
        },
        "response": {
          "id": "ccc8aaad-6e12-4a44-bb83-dfaf37f1a782",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d695807-23ef-422f-b711-ec0bba197b4f",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c1ff4c3-7214-40c5-99da-7b32977e9f6a"
        },
        "item": {
          "id": "65979ae1-227c-4ab1-9824-521042b8c445",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "776eaa47-e878-4d14-984b-c525a6a8b588",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "0fd8cd1a-6494-44d3-90a9-4254b148afdb",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "65979ae1-227c-4ab1-9824-521042b8c445",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5fb31ab1-63c7-4edc-a645-6bf96bdf6636",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "79e1c50c-c5f3-4e46-8969-29e04e950f4f"
        },
        "item": {
          "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
          "name": "Get All Environments",
          "request": {
            "url": {
              "path": [
                "environments"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "029d4735-6ea0-439f-82f3-21a8fdf301e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f8b8bfbb-6530-436f-8ac1-058ab0873408",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 124
        },
        "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2a5d967d-ccd2-4df9-b478-60fe18d52b2f",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53e0502c-2752-4be9-b9e2-9322cabc7b01"
        },
        "item": {
          "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "897c211d-6ac1-4e0f-9b8e-c242fef068d5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "environment",
                "type": "file",
                "src": "{\"id\":\"test-env-1753802834215\",\"name\":\"Test Environment\",\"values\":[{\"key\":\"test_var\",\"value\":\"test_value\",\"enabled\":true}],\"_postman_variable_scope\":\"environment\"}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "e1e39061-19e0-4e21-8b81-706e8574fc36",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 28
        },
        "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "88cd06d3-6a91-4063-9ce2-4dd9a3e79042",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a78ed0b8-2a12-4d4e-99bd-f33376eaffd9"
        },
        "item": {
          "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99869e40-3482-47d8-830c-076d8d343513",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e26ce342-1c99-44c0-ad13-6a5d7c4e45af",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 124
        },
        "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid environment JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid environment JSON",
              "message": "expected [ { …(4) } ] to have property 'name'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "71bc4246-0961-42ad-b72f-c4fdf01d1a0a",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5437c9c4-5cce-4b7c-94bc-fdad53ec0a65"
        },
        "item": {
          "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "242cd348-fa3b-4d76-9ca5-8b458fe1ab2e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
          }
        },
        "response": {
          "id": "112a909d-4fdd-4971-b406-1b405ec22c37",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3775a7d7-59a7-44da-8358-965a3ae698ae",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0f80e78c-2864-4e76-ac2c-563e8a52df9c"
        },
        "item": {
          "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "85a2547f-a7c2-43b2-92b9-5ad56aa02a57",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "310ad5d6-21c2-497f-967e-bfce16756916",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6624f4ca-817a-4811-978a-72ac54338f33",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "513fd96b-d538-4769-8a42-9cfe077b7271"
        },
        "item": {
          "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "663a59fc-d5cd-49e2-b1f2-facaadfbc776",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
          }
        },
        "response": {
          "id": "d62dcc5b-e73e-4b76-932d-d1e7835ff8ea",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 39
        },
        "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c5a26aee-e557-4970-88e2-822fcaf0d0da",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e5d1606e-e20c-4c66-8f5a-2b13e3bea904"
        },
        "item": {
          "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c3785c29-f98e-4d22-85ce-a5e2aeaf6959",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
          }
        },
        "response": {
          "id": "ac4c584c-bfb2-4dfb-b4df-a91381dbcb54",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 39
        },
        "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 932
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "63f5089d6fd02906ce2997a7c9efa585",
          "id": "0fedb29d-a0bb-4828-9347-e2d968c12a77",
          "timestamp": 1753802833842,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "194f9fb1-b3f4-47bd-b5a6-0e3db69885d6",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "72596931-0168-4976-8d5c-4e3f323ebf82",
          "scriptId": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
          "execution": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "46064d093507c0d4645d67b1b46d48e8",
          "id": "32341bd2-6b03-4d9f-bbb6-bd3209753549",
          "timestamp": 1753802833848,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "194f9fb1-b3f4-47bd-b5a6-0e3db69885d6",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "72596931-0168-4976-8d5c-4e3f323ebf82",
          "scriptId": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
          "execution": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid collection JSON",
          "message": "expected [ { …(4) } ] to have property 'info'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "7b7af146ef773fbc28a338f861c32c7c",
          "id": "0949b2f1-46cb-459c-82e0-5c178dee82ff",
          "timestamp": 1753802833922,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f6e9dbfb-3fe7-489b-8a80-4baa11ba1b26",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1170b500-7cb5-43fa-a5e2-8fdaaaacbeb7",
          "scriptId": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
          "execution": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "0772d925-17d0-4f76-b067-144546023c42",
          "timestamp": 1753802834023,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedff904-9169-4a92-839c-a69424c39254",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c3047e5c-1325-4212-afc6-e6b66bccca13",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5bb0091-68ee-4d02-a1b5-758c971692e4",
          "scriptId": "eedff904-9169-4a92-839c-a69424c39254",
          "execution": "cf843b70-033b-4ab2-94c5-17c3ab972686"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7036f88a4a44402bd7e60eab9a26d6c9",
          "id": "490da4b5-f62e-4b03-92de-86e221bd5b71",
          "timestamp": 1753802834027,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedff904-9169-4a92-839c-a69424c39254",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c3047e5c-1325-4212-afc6-e6b66bccca13",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5bb0091-68ee-4d02-a1b5-758c971692e4",
          "scriptId": "eedff904-9169-4a92-839c-a69424c39254",
          "execution": "cf843b70-033b-4ab2-94c5-17c3ab972686"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "01591d68-492b-4e17-b344-4a7805500f21",
          "timestamp": 1753802834095,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "65979ae1-227c-4ab1-9824-521042b8c445",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1d695807-23ef-422f-b711-ec0bba197b4f",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c1ff4c3-7214-40c5-99da-7b32977e9f6a",
          "scriptId": "6307c99f-cd08-4025-b695-adf0a65533c5",
          "execution": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d2f339d7dbd0c03b86a114a828087760",
          "id": "d55d785d-414e-45da-a0da-1b0a3a48917a",
          "timestamp": 1753802834096,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "65979ae1-227c-4ab1-9824-521042b8c445",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
              }
            }
          ]
        },
        "parent": {
          "id": "5e29cc3b-a795-4227-929f-afc1199b3cfb",
          "name": "Collections API",
          "item": [
            {
              "id": "34fc385d-edbf-41e5-8bbd-e413de3c4575",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ae1e7b2-0e05-4e15-9af8-2c7f6ec7905b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "f64f72e9-df6a-46d9-a6b3-b89df5cbfc55"
                  }
                }
              ]
            },
            {
              "id": "35dd8dd7-8c97-47f2-8801-51ec6c663cc2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1db7ec1f-fda5-4327-94f6-8b5e8897e8f1",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "5d346e23-485b-4c3c-b423-4b54542cac94"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "59cf7f6a-05c2-455c-a547-9263ac0c916b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "0ec85f90-06e5-4bdf-9ea8-d4d116300aa5"
                  }
                }
              ]
            },
            {
              "id": "e4d4306a-ecdb-453b-addd-0503d0047e2f",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407d1fa3-7e2a-4e07-b895-803fb57b67d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "bbe737cc-eaa4-4634-9573-6c2fd9dc9180"
                  }
                }
              ]
            },
            {
              "id": "717bf08e-1b1a-49bb-ad1e-2003bd3df717",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedff904-9169-4a92-839c-a69424c39254",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "cf843b70-033b-4ab2-94c5-17c3ab972686"
                  }
                }
              ]
            },
            {
              "id": "65979ae1-227c-4ab1-9824-521042b8c445",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6307c99f-cd08-4025-b695-adf0a65533c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1d695807-23ef-422f-b711-ec0bba197b4f",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c1ff4c3-7214-40c5-99da-7b32977e9f6a",
          "scriptId": "6307c99f-cd08-4025-b695-adf0a65533c5",
          "execution": "6b3592d6-6de0-47ac-bb4a-47bef7761a9a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "8cb9304106fb962ca9e8cb3646c1d6ef",
          "id": "62c0094d-e272-4cb7-909a-627631a489a5",
          "timestamp": 1753802834264,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2a5d967d-ccd2-4df9-b478-60fe18d52b2f",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53e0502c-2752-4be9-b9e2-9322cabc7b01",
          "scriptId": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
          "execution": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "a5eadbbaddf7057a07e38b97e74398e0",
          "id": "7e736d72-098e-42c8-b906-2f0aa37498ab",
          "timestamp": 1753802834269,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2a5d967d-ccd2-4df9-b478-60fe18d52b2f",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53e0502c-2752-4be9-b9e2-9322cabc7b01",
          "scriptId": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
          "execution": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid environment JSON",
          "message": "expected [ { …(4) } ] to have property 'name'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7df9f205c516f1042fa18e4e11bec77a",
          "id": "032c172f-9a82-406d-9b07-1174a57ef822",
          "timestamp": 1753802834364,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "88cd06d3-6a91-4063-9ce2-4dd9a3e79042",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a78ed0b8-2a12-4d4e-99bd-f33376eaffd9",
          "scriptId": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
          "execution": "00116e17-72c7-4c00-8766-c89658c7ad12"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "51f62f97358e839673dfe407246b1342",
          "id": "ed96a755-d590-40b1-b69f-7de8e4d43b0d",
          "timestamp": 1753802834428,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71bc4246-0961-42ad-b72f-c4fdf01d1a0a",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5437c9c4-5cce-4b7c-94bc-fdad53ec0a65",
          "scriptId": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
          "execution": "5b968749-d4ce-454e-9038-320bca21c9f7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d06ee42f55ae9a2a884c04d8f23271b7",
          "id": "ab015c04-9f0b-4a1c-8c23-7e1e7a8ef842",
          "timestamp": 1753802834429,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71bc4246-0961-42ad-b72f-c4fdf01d1a0a",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5437c9c4-5cce-4b7c-94bc-fdad53ec0a65",
          "scriptId": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
          "execution": "5b968749-d4ce-454e-9038-320bca21c9f7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d3dd5545e58f581c4635dfe9af03c35",
          "id": "0db68f6a-22dd-4e04-ba21-26cd62ff88b9",
          "timestamp": 1753802834516,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3775a7d7-59a7-44da-8358-965a3ae698ae",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0f80e78c-2864-4e76-ac2c-563e8a52df9c",
          "scriptId": "17c152dd-09af-4bca-89e0-d6c7899e1203",
          "execution": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "949aaae4b4c63428fbeba46992d75766",
          "id": "489dae27-f1e8-4bd7-b2fd-d249cd67ef1a",
          "timestamp": 1753802834518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
              }
            }
          ]
        },
        "parent": {
          "id": "c64ca9c7-faef-46b9-9cba-3fc8cac1ba8b",
          "name": "Environments API",
          "item": [
            {
              "id": "b5fd849b-ac9d-42c1-8b4b-d7fea2c0fc4d",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c975135f-8d34-4c9f-89a9-c224d6807a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "f8ba6ea7-cc58-4907-a189-a51fc3532f67"
                  }
                }
              ]
            },
            {
              "id": "f3a0889c-fc94-48ab-a82c-59d5732361a7",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1149d0bd-e416-4f3c-a3b3-16bc1ca43eae",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "6a423f9d-0d94-4bd5-b970-9801d0e4b1ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "91f3b5e3-fbed-40fd-bd0b-a1e00f023d78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "7e73b69f-6259-4f2d-90b0-c61eb7721aff"
                  }
                }
              ]
            },
            {
              "id": "eaed119e-58fe-4a40-922b-bbe1bbbbafcc",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2f9be0f-f653-47e7-8bb0-3977ea745854",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "00116e17-72c7-4c00-8766-c89658c7ad12"
                  }
                }
              ]
            },
            {
              "id": "116803dd-78a1-4fec-963b-b0a9a43db21c",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad677d1-902c-4256-81dd-5cd226ed2a4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "5b968749-d4ce-454e-9038-320bca21c9f7"
                  }
                }
              ]
            },
            {
              "id": "a290b550-f5c8-4d59-9879-072c3721dcf4",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c152dd-09af-4bca-89e0-d6c7899e1203",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3775a7d7-59a7-44da-8358-965a3ae698ae",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0f80e78c-2864-4e76-ac2c-563e8a52df9c",
          "scriptId": "17c152dd-09af-4bca-89e0-d6c7899e1203",
          "execution": "2d9b9332-8e09-4c0a-8573-29d62de67f40"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5aee59275ad77079b548135c9cd9ff77",
          "id": "7f8dfd9e-fc31-4df7-89da-82b7b4ab8d5d",
          "timestamp": 1753802834624,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
              }
            }
          ]
        },
        "parent": {
          "id": "27ace122-b777-48f0-843c-500db65d641e",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
                  }
                }
              ]
            },
            {
              "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6624f4ca-817a-4811-978a-72ac54338f33",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "513fd96b-d538-4769-8a42-9cfe077b7271",
          "scriptId": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
          "execution": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "6b1b7c09d4201b021e9a59d1ea55f105",
          "id": "b2c3ecbf-9901-492a-a5e1-f10af0443a36",
          "timestamp": 1753802834626,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
              }
            }
          ]
        },
        "parent": {
          "id": "27ace122-b777-48f0-843c-500db65d641e",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
                  }
                }
              ]
            },
            {
              "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6624f4ca-817a-4811-978a-72ac54338f33",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "513fd96b-d538-4769-8a42-9cfe077b7271",
          "scriptId": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
          "execution": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6e2b98e8ac16282d2c9d967bf41d9711",
          "id": "1347658b-f716-4e9d-9946-f3c60431ecca",
          "timestamp": 1753802834713,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
              }
            }
          ]
        },
        "parent": {
          "id": "27ace122-b777-48f0-843c-500db65d641e",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
                  }
                }
              ]
            },
            {
              "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c5a26aee-e557-4970-88e2-822fcaf0d0da",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e5d1606e-e20c-4c66-8f5a-2b13e3bea904",
          "scriptId": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
          "execution": "cd959c8e-881e-4113-9b81-3b493e7694d0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "14a8181d7cde2a146a8dde2c5ab7afd2",
          "id": "bccd3a0a-7aa8-45c3-af0b-752cf966317d",
          "timestamp": 1753802834714,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
              }
            }
          ]
        },
        "parent": {
          "id": "27ace122-b777-48f0-843c-500db65d641e",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "92c5e661-99a7-4adb-98ee-7521b6b0ca93",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b4447d7-0268-4fc9-a529-3fe5978e2335",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "abe494ca-1d8c-4a36-be35-92fbd5f9a4e6"
                  }
                }
              ]
            },
            {
              "id": "52007ff9-95ff-492c-a240-177b8efc9e50",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "cd959c8e-881e-4113-9b81-3b493e7694d0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c5a26aee-e557-4970-88e2-822fcaf0d0da",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e5d1606e-e20c-4c66-8f5a-2b13e3bea904",
          "scriptId": "69c907f4-02db-41ec-865e-f2eb2e6be4cb",
          "execution": "cd959c8e-881e-4113-9b81-3b493e7694d0"
        }
      }
    ],
    "error": null
  }
}