{
  "collection": {
    "_": {
      "postman_id": "newman-at-api-001"
    },
    "item": [
      {
        "id": "301a85ea-3177-4f1e-b76f-8b7028bfa823",
        "name": "Health Check",
        "item": [
          {
            "id": "4073ed98-b7a1-4f36-94db-e452788ad214",
            "name": "API Health",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "41bfac89-6837-4c17-a46e-7ca45b17c30e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has correct structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData.status).to.eql('ok');",
                    "});"
                  ],
                  "_lastExecutionId": "6fbeeb58-0841-4ce1-af9f-55c20a0a8eaf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
        "name": "Collections API",
        "item": [
          {
            "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
            "name": "Get All Collections",
            "request": {
              "url": {
                "path": [
                  "collections"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "// Save collection count for later tests",
                    "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                  ],
                  "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                }
              }
            ]
          },
          {
            "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
            "name": "Upload Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "collection",
                    "type": "file",
                    "src": "{{testCollectionContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid collection",
                    "const testCollection = {",
                    "    \"info\": {",
                    "        \"_postman_id\": \"test-\" + Date.now(),",
                    "        \"name\": \"Test Collection\",",
                    "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                    "    },",
                    "    \"item\": [",
                    "        {",
                    "            \"name\": \"Test Request\",",
                    "            \"request\": {",
                    "                \"method\": \"GET\",",
                    "                \"url\": \"https://example.com\"",
                    "            }",
                    "        }",
                    "    ]",
                    "};",
                    "",
                    "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                  ],
                  "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                }
              }
            ]
          },
          {
            "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
            "name": "Get Specific Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid collection JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('info');",
                    "    pm.expect(jsonData).to.have.property('item');",
                    "});"
                  ],
                  "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                }
              }
            ]
          },
          {
            "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
            "name": "Update Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                }
              }
            ]
          },
          {
            "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
            "name": "Delete Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
        "name": "Environments API",
        "item": [
          {
            "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
            "name": "Get All Environments",
            "request": {
              "url": {
                "path": [
                  "environments"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                }
              }
            ]
          },
          {
            "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
            "name": "Upload Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "environment",
                    "type": "file",
                    "src": "{{testEnvironmentContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid environment",
                    "const testEnvironment = {",
                    "    \"id\": \"test-env-\" + Date.now(),",
                    "    \"name\": \"Test Environment\",",
                    "    \"values\": [",
                    "        {",
                    "            \"key\": \"test_var\",",
                    "            \"value\": \"test_value\",",
                    "            \"enabled\": true",
                    "        }",
                    "    ],",
                    "    \"_postman_variable_scope\": \"environment\"",
                    "};",
                    "",
                    "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                  ],
                  "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                }
              }
            ]
          },
          {
            "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
            "name": "Get Specific Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53b04051-e499-4007-bca3-ead418c1af37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid environment JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('values');",
                    "    pm.expect(jsonData.values).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                }
              }
            ]
          },
          {
            "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
            "name": "Update Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                }
              }
            ]
          },
          {
            "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
            "name": "Delete Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f50485f8-00b8-45be-93a3-07306c5fed78",
        "name": "Newman Runner API",
        "item": [
          {
            "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
            "name": "Run Collection (Simple)",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
                }
              }
            ]
          },
          {
            "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
            "name": "Run Collection with Environment",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "c82d0d82-651c-4564-a6cc-3055c3a4518d",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "0afad7d7-9f1e-4ee4-bcb9-1991588d5ba8"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "f7a27c00-a79b-480e-a3a6-a46368ab9bc7",
          "type": "text/javascript",
          "exec": [
            "// Log response for debugging",
            "console.log('Response:', pm.response.text());"
          ],
          "_lastExecutionId": "857a046a-e7e5-4932-a3ce-8bf0a876d337"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "uploaded_collection_filename"
      },
      {
        "type": "any",
        "value": "",
        "key": "uploaded_environment_filename"
      },
      {
        "type": "any",
        "value": "0",
        "key": "initial_collection_count"
      }
    ],
    "info": {
      "_postman_id": "newman-at-api-001",
      "name": "Newman AT Backend API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete test suite for Newman AT backend API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-01-29T12:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "newman-at-local",
    "name": "Newman AT Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "/api",
        "key": "api_prefix"
      },
      {
        "type": "any",
        "value": "test-collection.json",
        "key": "test_collection_name"
      },
      {
        "type": "any",
        "value": "test-environment.json",
        "key": "test_environment_name"
      }
    ]
  },
  "globals": {
    "id": "87db6b9e-1ecb-4b2d-87d3-2bb389fb0ed8",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.153846153846153,
      "responseMin": 4,
      "responseMax": 56,
      "responseSd": 13.288781583588898,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753802805341,
      "completed": 1753802806742
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d01bb6cd-a207-45a3-979e-de784238176b",
          "httpRequestId": "9e76a53a-bf93-40ae-b082-f051047dca6a"
        },
        "item": {
          "id": "4073ed98-b7a1-4f36-94db-e452788ad214",
          "name": "API Health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41bfac89-6837-4c17-a46e-7ca45b17c30e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "_lastExecutionId": "6fbeeb58-0841-4ce1-af9f-55c20a0a8eaf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dfe84f32-4db4-492d-91e7-dc4d9d9c1140",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "72f19ed4-0988-4c40-9cad-c4b1f14a628e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "52"
            },
            {
              "key": "ETag",
              "value": "W/\"34-7Y+GhsSQxyujdSDn37Y/Tuy9mo8\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:45 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 56,
          "responseSize": 52
        },
        "id": "4073ed98-b7a1-4f36-94db-e452788ad214",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fa7e100f-6972-413f-a1c8-406f8f9c659e",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fd188eb4-8b39-4687-8ae4-5e82329c0df1"
        },
        "item": {
          "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
          "name": "Get All Collections",
          "request": {
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save collection count for later tests",
                  "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                ],
                "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e98d1dc1-4dbb-4980-b80a-b02a21012d72",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2e4c5b5b-4ee6-44cd-b25d-a4f30292370e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:45 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 189
        },
        "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "49adaac0-38a5-4efe-a6ca-118b0acc8962",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f32375cb-9e90-40bd-9f84-ea6b6a21ea4a"
        },
        "item": {
          "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df0a5362-09ed-4653-82e3-9ed44887c731",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "collection",
                "type": "file",
                "src": "{\"info\":{\"_postman_id\":\"test-1753802805666\",\"name\":\"Test Collection\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},\"item\":[{\"name\":\"Test Request\",\"request\":{\"method\":\"GET\",\"url\":\"https://example.com\"}}]}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "2576c17e-f182-4773-b653-cc7637eaadbf",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:45 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 28
        },
        "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "820d6723-4c7b-4d47-872b-5a56ac18f7fd",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2abec9c5-a448-4f6b-b7fa-c0a7813e3347"
        },
        "item": {
          "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "debcb53b-a8fa-4c3f-8f1e-33391a244d43",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "32c43b2a-5725-48c5-8ecd-e721527cac56",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:45 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 189
        },
        "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid collection JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid collection JSON",
              "message": "expected [ { …(4) } ] to have property 'info'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6ac4b13e-5f1b-4a19-ae4a-31a2328e6d00",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d984aba9-35af-4a9b-876f-6b75b7974955"
        },
        "item": {
          "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "161acd41-5870-4201-8fbe-065da8114f47",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "401",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
          }
        },
        "response": {
          "id": "774c5510-1b99-4886-b42b-92e1ef07450f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:45 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c85fa512-91fc-4cce-8a6b-b9f8f96ee73c",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "90efecab-64e0-4a3c-a0d2-a889b6780cb4"
        },
        "item": {
          "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12f64c33-eaf4-47f2-990b-d35aa0bf0594",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "7f2dc039-f16c-4753-ac39-ecbfe2f2c7a4",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b260aae4-db1b-4bda-8cfc-c69e85d8fce6",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "961cd80b-533a-4b03-903c-6093992f7c35"
        },
        "item": {
          "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
          "name": "Get All Environments",
          "request": {
            "url": {
              "path": [
                "environments"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9383e413-cd3b-4ef3-b2d4-4cc47b5e63ec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2bc7042a-bdfb-4b84-9f58-06cb635535bc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 124
        },
        "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce678f21-dbfa-4968-8163-964afca88694",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a9390b9-3095-45f7-912b-e16c3e178561"
        },
        "item": {
          "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a4e7f586-cb39-42ac-8ef7-e9e77771cf8f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "environment",
                "type": "file",
                "src": "{\"id\":\"test-env-1753802806241\",\"name\":\"Test Environment\",\"values\":[{\"key\":\"test_var\",\"value\":\"test_value\",\"enabled\":true}],\"_postman_variable_scope\":\"environment\"}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "4858026b-6381-4254-a1a3-ae32f29fa78a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 28
        },
        "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8477d2ce-8fe4-4e25-b7ed-190d0a0a3c10",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dbbbbc03-088e-47f5-a973-de5090cbcc08"
        },
        "item": {
          "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b04051-e499-4007-bca3-ead418c1af37",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4fdd16de-ad26-4411-a6a0-65a52bccbdd2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "52329562-47c6-460e-b96a-214f4e7b6678",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 124
        },
        "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid environment JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid environment JSON",
              "message": "expected [ { …(4) } ] to have property 'name'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "55945258-4828-4493-a466-229ede1aafe8",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84b0cd24-f90a-4e15-8979-5aa38a1cde31"
        },
        "item": {
          "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ea013581-bda0-4e75-a435-1dcb89dea950",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
          }
        },
        "response": {
          "id": "95f420ec-c8a0-4e99-bf06-17e9e18546a1",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9109f21b-8c67-4316-8c7e-90b3c2cdf7d2",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b41d74a-5b0e-4da2-9a93-240d6195af5c"
        },
        "item": {
          "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "618861d1-2b6c-4fbc-b78c-a15446842ad9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "fb152a1e-dd51-4e31-98e5-a6e786e91bd3",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4bca9ea8-9766-4f2e-839e-08acc17188c1",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "92bed43b-19e5-457e-afff-a2bcd802aade"
        },
        "item": {
          "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27884808-a147-4bc2-a432-c6b6b8f82052",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
          }
        },
        "response": {
          "id": "928d33a4-65f7-4901-943f-2fe6b9cdec18",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 39
        },
        "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "37be4f2e-8445-4705-b0ae-467acb0a940d",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79d0d118-923b-4da6-9060-87c8c2c5883c"
        },
        "item": {
          "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e7862464-38e2-4935-9904-33ad5e31ebd3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
          }
        },
        "response": {
          "id": "d7953f7e-d7a7-4fe5-b8cb-80ac6a6bf15a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:26:46 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 39
        },
        "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 932
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "63f5089d6fd02906ce2997a7c9efa585",
          "id": "c8ba0088-96fb-46ba-a58b-691c4348e9f5",
          "timestamp": 1753802805739,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "49adaac0-38a5-4efe-a6ca-118b0acc8962",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f32375cb-9e90-40bd-9f84-ea6b6a21ea4a",
          "scriptId": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
          "execution": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "46064d093507c0d4645d67b1b46d48e8",
          "id": "074ac250-15ef-40e5-ab27-389863fe95d6",
          "timestamp": 1753802805746,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "49adaac0-38a5-4efe-a6ca-118b0acc8962",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f32375cb-9e90-40bd-9f84-ea6b6a21ea4a",
          "scriptId": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
          "execution": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid collection JSON",
          "message": "expected [ { …(4) } ] to have property 'info'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "7b7af146ef773fbc28a338f861c32c7c",
          "id": "e4a42b4b-1a0a-49bf-8471-89381dd9b631",
          "timestamp": 1753802805861,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "820d6723-4c7b-4d47-872b-5a56ac18f7fd",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2abec9c5-a448-4f6b-b7fa-c0a7813e3347",
          "scriptId": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
          "execution": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "d957fe91-c842-4d57-a4ea-d42adb1d71f9",
          "timestamp": 1753802805968,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6ac4b13e-5f1b-4a19-ae4a-31a2328e6d00",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d984aba9-35af-4a9b-876f-6b75b7974955",
          "scriptId": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
          "execution": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7036f88a4a44402bd7e60eab9a26d6c9",
          "id": "b60588dd-12f9-4911-8d21-82282db4fe32",
          "timestamp": 1753802805972,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6ac4b13e-5f1b-4a19-ae4a-31a2328e6d00",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d984aba9-35af-4a9b-876f-6b75b7974955",
          "scriptId": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
          "execution": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "2ed59f7d-03d0-4224-957f-b23a6a2d369d",
          "timestamp": 1753802806089,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c85fa512-91fc-4cce-8a6b-b9f8f96ee73c",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "90efecab-64e0-4a3c-a0d2-a889b6780cb4",
          "scriptId": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
          "execution": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d2f339d7dbd0c03b86a114a828087760",
          "id": "1df409c9-36bf-40c4-8c77-2ec47e36917a",
          "timestamp": 1753802806091,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
              }
            }
          ]
        },
        "parent": {
          "id": "7e52a642-bc42-473f-90a3-ba840e04c95a",
          "name": "Collections API",
          "item": [
            {
              "id": "56950043-440b-4ce9-80e4-b42a9530efd9",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b9cb564-499a-43fd-9c1b-b9da11a1c322",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0eb56a66-3360-4fa5-b82f-320ff7a13447"
                  }
                }
              ]
            },
            {
              "id": "101e7da6-8d73-4929-92ac-5223375cfeb3",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "51978b96-4dc1-4581-94a9-a712641320a2",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "4246c300-df59-4f37-916c-ea98c9d4e684"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "517f2a48-7dfd-476b-878a-d1cf91015cb7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "2b380037-a4fb-4c59-a991-0ed2d4dda8a9"
                  }
                }
              ]
            },
            {
              "id": "0c564a8c-5277-44bf-af10-82c5e49811ec",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b90620f7-fe3f-42cb-a67f-f7412e3fb7c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed4428e-b222-44ad-b5f0-d06d88a11115"
                  }
                }
              ]
            },
            {
              "id": "c1c43062-9e72-44a0-80e3-986a3cee66fb",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10aad4cf-a6da-44ca-b34d-63d31d0a7f80",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "4b1289f2-9ac8-46de-b0b7-d859a74570f5"
                  }
                }
              ]
            },
            {
              "id": "021d3140-cbe9-494c-85f3-b17837a0f205",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c85fa512-91fc-4cce-8a6b-b9f8f96ee73c",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "90efecab-64e0-4a3c-a0d2-a889b6780cb4",
          "scriptId": "6b0238c0-c203-40f5-9dd4-195d6acea54c",
          "execution": "2a4362c8-d47e-4c00-afa2-68d69aa713bd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "8cb9304106fb962ca9e8cb3646c1d6ef",
          "id": "b6fe2d9e-5652-4be4-86b2-3741bac875bd",
          "timestamp": 1753802806287,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ce678f21-dbfa-4968-8163-964afca88694",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a9390b9-3095-45f7-912b-e16c3e178561",
          "scriptId": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
          "execution": "75a02b36-4f7a-4051-966a-df80a7917c0b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "a5eadbbaddf7057a07e38b97e74398e0",
          "id": "07f75178-2f10-4fa3-8732-768b95d6be73",
          "timestamp": 1753802806290,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ce678f21-dbfa-4968-8163-964afca88694",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a9390b9-3095-45f7-912b-e16c3e178561",
          "scriptId": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
          "execution": "75a02b36-4f7a-4051-966a-df80a7917c0b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid environment JSON",
          "message": "expected [ { …(4) } ] to have property 'name'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7df9f205c516f1042fa18e4e11bec77a",
          "id": "4313748b-7095-4171-a12c-c577006eee1b",
          "timestamp": 1753802806394,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b04051-e499-4007-bca3-ead418c1af37",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8477d2ce-8fe4-4e25-b7ed-190d0a0a3c10",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dbbbbc03-088e-47f5-a973-de5090cbcc08",
          "scriptId": "53b04051-e499-4007-bca3-ead418c1af37",
          "execution": "71ce45aa-a373-424c-8a40-58e5c9563aca"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "51f62f97358e839673dfe407246b1342",
          "id": "581f3ebf-5d87-4e4f-a776-31925e693837",
          "timestamp": 1753802806474,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "55945258-4828-4493-a466-229ede1aafe8",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84b0cd24-f90a-4e15-8979-5aa38a1cde31",
          "scriptId": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
          "execution": "3d635aa8-4e80-474f-b236-827becc0b293"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d06ee42f55ae9a2a884c04d8f23271b7",
          "id": "d37c5268-e93a-4833-82a3-a2667783a233",
          "timestamp": 1753802806476,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "55945258-4828-4493-a466-229ede1aafe8",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84b0cd24-f90a-4e15-8979-5aa38a1cde31",
          "scriptId": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
          "execution": "3d635aa8-4e80-474f-b236-827becc0b293"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d3dd5545e58f581c4635dfe9af03c35",
          "id": "46ab51c3-bc20-4331-9acd-289e0d697e2d",
          "timestamp": 1753802806559,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9109f21b-8c67-4316-8c7e-90b3c2cdf7d2",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b41d74a-5b0e-4da2-9a93-240d6195af5c",
          "scriptId": "130458cd-3f99-43bd-b8de-5437e459ce36",
          "execution": "489f6a84-88cd-4efe-b949-eae817d4339f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "949aaae4b4c63428fbeba46992d75766",
          "id": "4feb0a2a-4ca2-4bcd-8dfb-158de6d62142",
          "timestamp": 1753802806560,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
              }
            }
          ]
        },
        "parent": {
          "id": "55a94d36-5689-42b6-8da9-1aff425a4865",
          "name": "Environments API",
          "item": [
            {
              "id": "955123d9-32e5-4072-a50b-dc4cff5efb7e",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7c53fef-4747-41c5-bbb5-6e434b6df96c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e45c4eb4-10b2-409d-8515-62390455a30f"
                  }
                }
              ]
            },
            {
              "id": "b96e856d-24f3-4a40-b614-260a7af2d322",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2976d02e-ca37-4a08-a962-9e7c8e54fe5f",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "c648c9b9-130e-41bf-90be-1e763ac73e8e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab88da0-0d96-4f7e-8d40-c617f83dcdad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "75a02b36-4f7a-4051-966a-df80a7917c0b"
                  }
                }
              ]
            },
            {
              "id": "136e6d71-49f0-42c4-8deb-710b0915a017",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b04051-e499-4007-bca3-ead418c1af37",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "71ce45aa-a373-424c-8a40-58e5c9563aca"
                  }
                }
              ]
            },
            {
              "id": "8412ab5f-bee6-47f8-91c2-9fc463952454",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f23fa92-86cc-4eb1-96ad-d46714714f1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "3d635aa8-4e80-474f-b236-827becc0b293"
                  }
                }
              ]
            },
            {
              "id": "f2908343-525e-4d34-a4b2-1baea7e048ae",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "130458cd-3f99-43bd-b8de-5437e459ce36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "489f6a84-88cd-4efe-b949-eae817d4339f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9109f21b-8c67-4316-8c7e-90b3c2cdf7d2",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b41d74a-5b0e-4da2-9a93-240d6195af5c",
          "scriptId": "130458cd-3f99-43bd-b8de-5437e459ce36",
          "execution": "489f6a84-88cd-4efe-b949-eae817d4339f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5aee59275ad77079b548135c9cd9ff77",
          "id": "3edeeeec-e2bc-4c9f-a415-825edbc9159c",
          "timestamp": 1753802806635,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
              }
            }
          ]
        },
        "parent": {
          "id": "f50485f8-00b8-45be-93a3-07306c5fed78",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
                  }
                }
              ]
            },
            {
              "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4bca9ea8-9766-4f2e-839e-08acc17188c1",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "92bed43b-19e5-457e-afff-a2bcd802aade",
          "scriptId": "1233eac8-cc34-4e8e-a256-880c0325aae9",
          "execution": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "6b1b7c09d4201b021e9a59d1ea55f105",
          "id": "f7b59e0a-f4a0-4187-928c-f8dd35c82e16",
          "timestamp": 1753802806637,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
              }
            }
          ]
        },
        "parent": {
          "id": "f50485f8-00b8-45be-93a3-07306c5fed78",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
                  }
                }
              ]
            },
            {
              "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4bca9ea8-9766-4f2e-839e-08acc17188c1",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "92bed43b-19e5-457e-afff-a2bcd802aade",
          "scriptId": "1233eac8-cc34-4e8e-a256-880c0325aae9",
          "execution": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6e2b98e8ac16282d2c9d967bf41d9711",
          "id": "198e2535-420f-41d6-ba92-37afe3f4b79a",
          "timestamp": 1753802806711,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
              }
            }
          ]
        },
        "parent": {
          "id": "f50485f8-00b8-45be-93a3-07306c5fed78",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
                  }
                }
              ]
            },
            {
              "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "37be4f2e-8445-4705-b0ae-467acb0a940d",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79d0d118-923b-4da6-9060-87c8c2c5883c",
          "scriptId": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
          "execution": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "14a8181d7cde2a146a8dde2c5ab7afd2",
          "id": "ca2186d8-7b47-4151-893a-b59b5d487a33",
          "timestamp": 1753802806713,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
              }
            }
          ]
        },
        "parent": {
          "id": "f50485f8-00b8-45be-93a3-07306c5fed78",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "0b549d34-c8b7-4128-8c7b-16ad6c935a0d",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1233eac8-cc34-4e8e-a256-880c0325aae9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "26b6a983-2f69-42ed-9e6c-feaec0e66048"
                  }
                }
              ]
            },
            {
              "id": "43cc47f5-8287-405f-a0c5-f41edda881f4",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "37be4f2e-8445-4705-b0ae-467acb0a940d",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79d0d118-923b-4da6-9060-87c8c2c5883c",
          "scriptId": "dff2f20d-59c0-4fa9-be28-c0103063fabf",
          "execution": "82fa00e9-397d-4d1a-b603-3b7aa36e2864"
        }
      }
    ],
    "error": null
  }
}