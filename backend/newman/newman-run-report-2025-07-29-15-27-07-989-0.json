{
  "collection": {
    "_": {
      "postman_id": "newman-at-api-001"
    },
    "item": [
      {
        "id": "6669079f-4803-49bc-8600-61b88dae67fc",
        "name": "Health Check",
        "item": [
          {
            "id": "10f37ea7-5400-4685-a20d-d7dbd529c888",
            "name": "API Health",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e620ce30-c747-45b9-8c36-c0df7f4ac1b8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has correct structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData.status).to.eql('ok');",
                    "});"
                  ],
                  "_lastExecutionId": "91d013f0-20ad-4199-b42b-9133b69c4493"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
        "name": "Collections API",
        "item": [
          {
            "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
            "name": "Get All Collections",
            "request": {
              "url": {
                "path": [
                  "collections"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "// Save collection count for later tests",
                    "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                  ],
                  "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                }
              }
            ]
          },
          {
            "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
            "name": "Upload Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "collection",
                    "type": "file",
                    "src": "{{testCollectionContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid collection",
                    "const testCollection = {",
                    "    \"info\": {",
                    "        \"_postman_id\": \"test-\" + Date.now(),",
                    "        \"name\": \"Test Collection\",",
                    "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                    "    },",
                    "    \"item\": [",
                    "        {",
                    "            \"name\": \"Test Request\",",
                    "            \"request\": {",
                    "                \"method\": \"GET\",",
                    "                \"url\": \"https://example.com\"",
                    "            }",
                    "        }",
                    "    ]",
                    "};",
                    "",
                    "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                  ],
                  "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                }
              }
            ]
          },
          {
            "id": "031bfaad-7f10-4798-b853-28f6736d1848",
            "name": "Get Specific Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid collection JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('info');",
                    "    pm.expect(jsonData).to.have.property('item');",
                    "});"
                  ],
                  "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                }
              }
            ]
          },
          {
            "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
            "name": "Update Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                }
              }
            ]
          },
          {
            "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
            "name": "Delete Collection",
            "request": {
              "url": {
                "path": [
                  "collections",
                  "{{uploaded_collection_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
        "name": "Environments API",
        "item": [
          {
            "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
            "name": "Get All Environments",
            "request": {
              "url": {
                "path": [
                  "environments"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is an array\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                }
              }
            ]
          },
          {
            "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
            "name": "Upload Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "upload"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "environment",
                    "type": "file",
                    "src": "{{testEnvironmentContent}}"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                  "type": "text/javascript",
                  "exec": [
                    "// Create a minimal valid environment",
                    "const testEnvironment = {",
                    "    \"id\": \"test-env-\" + Date.now(),",
                    "    \"name\": \"Test Environment\",",
                    "    \"values\": [",
                    "        {",
                    "            \"key\": \"test_var\",",
                    "            \"value\": \"test_value\",",
                    "            \"enabled\": true",
                    "        }",
                    "    ],",
                    "    \"_postman_variable_scope\": \"environment\"",
                    "};",
                    "",
                    "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                  ],
                  "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms upload\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('filename');",
                    "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                    "});",
                    "",
                    "// Save filename for later tests",
                    "if (pm.response.json().filename) {",
                    "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                    "}"
                  ],
                  "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                }
              }
            ]
          },
          {
            "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
            "name": "Get Specific Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is valid environment JSON\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('values');",
                    "    pm.expect(jsonData.values).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                }
              }
            ]
          },
          {
            "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
            "name": "Update Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms update\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                }
              }
            ]
          },
          {
            "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
            "name": "Delete Environment",
            "request": {
              "url": {
                "path": [
                  "environments",
                  "{{uploaded_environment_filename}}"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response confirms deletion\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted successfully');",
                    "});"
                  ],
                  "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3236bc8b-9e8d-42a1-be3e-e1d18d044f37",
        "name": "Newman Runner API",
        "item": [
          {
            "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
            "name": "Run Collection (Simple)",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
                }
              }
            ]
          },
          {
            "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
            "name": "Run Collection with Environment",
            "request": {
              "url": {
                "path": [
                  "newman",
                  "run"
                ],
                "host": [
                  "{{base_url}}{{api_prefix}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response headers indicate SSE\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                    "});"
                  ],
                  "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "3e86a489-6e9e-452d-957e-b4ee87ea87ba",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "5e095bd3-30e2-45ec-bed3-ce9ced3482e2"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "a371fb2a-90ea-45c8-b11d-4528c416e419",
          "type": "text/javascript",
          "exec": [
            "// Log response for debugging",
            "console.log('Response:', pm.response.text());"
          ],
          "_lastExecutionId": "f2623317-577c-4442-a234-7910c9809a8c"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "uploaded_collection_filename"
      },
      {
        "type": "any",
        "value": "",
        "key": "uploaded_environment_filename"
      },
      {
        "type": "any",
        "value": "0",
        "key": "initial_collection_count"
      }
    ],
    "info": {
      "_postman_id": "newman-at-api-001",
      "name": "Newman AT Backend API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Complete test suite for Newman AT backend API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-01-29T12:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "newman-at-local",
    "name": "Newman AT Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "/api",
        "key": "api_prefix"
      },
      {
        "type": "any",
        "value": "test-collection.json",
        "key": "test_collection_name"
      },
      {
        "type": "any",
        "value": "test-environment.json",
        "key": "test_environment_name"
      }
    ]
  },
  "globals": {
    "id": "e2819b40-3e30-43b2-99e9-bce606ebfb95",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.307692307692308,
      "responseMin": 4,
      "responseMax": 55,
      "responseSd": 12.981552682910143,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753802826557,
      "completed": 1753802827975
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5057a95e-693c-4f6f-b95f-4f8befcbdf9b",
          "httpRequestId": "ad318772-1757-480e-aa98-a30b5786f85e"
        },
        "item": {
          "id": "10f37ea7-5400-4685-a20d-d7dbd529c888",
          "name": "API Health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e620ce30-c747-45b9-8c36-c0df7f4ac1b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.status).to.eql('ok');",
                  "});"
                ],
                "_lastExecutionId": "91d013f0-20ad-4199-b42b-9133b69c4493"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "310574ad-76ac-4e36-b126-4d560aea82df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8e0b9845-f20c-49ad-b307-a0bd3ceccddb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "52"
            },
            {
              "key": "ETag",
              "value": "W/\"34-7Y+GhsSQxyujdSDn37Y/Tuy9mo8\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:06 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 55,
          "responseSize": 52
        },
        "id": "10f37ea7-5400-4685-a20d-d7dbd529c888",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "af4589cd-aaf7-4651-9b93-fcb3f732ad96",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2363d232-f22e-49fc-bd75-83c8cec62cfe"
        },
        "item": {
          "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
          "name": "Get All Collections",
          "request": {
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save collection count for later tests",
                  "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                ],
                "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76bd4975-cb06-484b-9ad8-8a4dc6ed4681",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5f5b7d33-4217-4ada-a685-3c51b469eac4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:06 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 189
        },
        "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c94ab4df-a020-4ed2-bd45-4cb8be044401",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "edea99a7-4202-41b6-93aa-6aeaa889e05a"
        },
        "item": {
          "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24b13883-7c23-4368-ad71-8ddc4b4a1a1b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "collection",
                "type": "file",
                "src": "{\"info\":{\"_postman_id\":\"test-1753802826882\",\"name\":\"Test Collection\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"},\"item\":[{\"name\":\"Test Request\",\"request\":{\"method\":\"GET\",\"url\":\"https://example.com\"}}]}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "fdca5f74-a749-4136-83d5-7a9713758ab9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:06 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 28
        },
        "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "335ebe47-d248-4ce7-91a1-3af0aa6e5186",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "106b66ec-5715-482f-a5e6-29edd7edce7e"
        },
        "item": {
          "id": "031bfaad-7f10-4798-b853-28f6736d1848",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d9acd19-3d31-483f-ba23-93293c92dda5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d4738cab-762f-45ac-a82f-c4649a7d11b2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "189"
            },
            {
              "key": "ETag",
              "value": "W/\"bd-TP2hKULVEGcJK6CYxy5QESkHQYU\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              97,
              112,
              105,
              45,
              116,
              101,
              115,
              116,
              115,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              32,
              102,
              111,
              114,
              32,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              53,
              52,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 189
        },
        "id": "031bfaad-7f10-4798-b853-28f6736d1848",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid collection JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid collection JSON",
              "message": "expected [ { …(4) } ] to have property 'info'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f093bb34-b990-43fd-af33-9bef686f2f41",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6c5d7ff6-5dd7-4ef5-989f-c193d8275685"
        },
        "item": {
          "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8160a579-5cd7-4fe5-a2e1-006e80df8202",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "401",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
          }
        },
        "response": {
          "id": "6f784d71-c47e-4acb-bbbc-e4718d94d918",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5b7ea8d-349a-4297-9f93-470a7d8c4be9",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e4e56fc5-d51e-4057-93cf-88523801c493"
        },
        "item": {
          "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "collections",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5e31a010-7452-4356-b9b7-1d48532cfe91",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "7b0d3fef-2ddf-4da6-9e31-2a6bfd2574a4",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "16da4e1f-4022-4cce-aef0-d81f9f04fbcf",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ac968ca9-2c69-4155-9703-868406df1a8d"
        },
        "item": {
          "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
          "name": "Get All Environments",
          "request": {
            "url": {
              "path": [
                "environments"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "06a2d566-3981-4aed-8976-fff59518d92e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "44ce4e09-07c8-4b5f-8d8f-40046f5c2e78",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 124
        },
        "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0ffab1c-811a-43cf-ac2b-37d4b016de16",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b6448885-d8cf-410a-8f93-2892a37952b2"
        },
        "item": {
          "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1a8742a8-88f2-490a-966a-a09c265fa5a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "environment",
                "type": "file",
                "src": "{\"id\":\"test-env-1753802827443\",\"name\":\"Test Environment\",\"values\":[{\"key\":\"test_var\",\"value\":\"test_value\",\"enabled\":true}],\"_postman_variable_scope\":\"environment\"}",
                "disabled": true
              }
            ]
          }
        },
        "response": {
          "id": "1991c04e-aaf9-4616-ab79-0f9b12a41a5b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-onk6IZjTjlvdo7oEedoK8CJs0As\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              32,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              108,
              111,
              97,
              100,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 28
        },
        "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response confirms upload",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms upload",
              "message": "expected { error: 'No file uploaded' } to have property 'message'",
              "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a27c8666-deaa-4a67-8de8-09399add186b",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15fbf55b-e1a8-4e81-bba4-0cce5ef816d7"
        },
        "item": {
          "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce491dba-b10f-4fd1-b23b-df0ded023630",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ca0cedd1-f063-4a3e-8218-1c579fb46866",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "124"
            },
            {
              "key": "ETag",
              "value": "W/\"7c-1D7R4xyP6LU3ZLiAoY32dnTQcvs\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              110,
              101,
              119,
              109,
              97,
              110,
              45,
              97,
              116,
              45,
              108,
              111,
              99,
              97,
              108,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              119,
              109,
              97,
              110,
              32,
              65,
              84,
              32,
              76,
              111,
              99,
              97,
              108,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              115,
              34,
              58,
              52,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              57,
              84,
              49,
              53,
              58,
              49,
              55,
              58,
              51,
              54,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 124
        },
        "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is valid environment JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is valid environment JSON",
              "message": "expected [ { …(4) } ] to have property 'name'",
              "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d4b38fcb-c98b-4787-bae8-22c0fdc1f6ec",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ad129d15-e802-4155-a918-262b0a13b181"
        },
        "item": {
          "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7ff90756-ca18-41ac-86ad-423e31793e0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
          }
        },
        "response": {
          "id": "e3d6fed6-e30f-4ed4-aa27-0e8aeb5f920b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response confirms update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms update",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1beb983f-3aae-4afc-94c1-d1de29a97208",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ed1f2157-21ae-479f-93f9-1ca23a822613"
        },
        "item": {
          "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "environments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d8a1c996-4a75-4347-ad0d-39c6be2a4694",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "073df367-dd6f-4218-8d72-2cd288b1a402",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-SvoDJ0TWSUtmmS54YVs86NoyJAg\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response confirms deletion",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response confirms deletion",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cc85ae91-cf89-4bc2-b30e-6e25763cf2e5",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f8e08d72-8c2d-4a49-aded-d9d7a4a4f1cf"
        },
        "item": {
          "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9d23110e-0af8-4f1b-9c7a-492c957f2fe5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
          }
        },
        "response": {
          "id": "318396d4-a176-468d-91e2-d5215f1b4365",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 39
        },
        "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "47d47110-4c10-4710-b047-16a46bbf125c",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04cc508f-aaf0-4239-84a3-0c9791c363eb"
        },
        "item": {
          "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "newman",
              "run"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9f11326-58e1-4af2-84a2-caa34dfaabb2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
          }
        },
        "response": {
          "id": "e8c1b726-76dd-483a-ab37-82fe68fbdc11",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "39"
            },
            {
              "key": "ETag",
              "value": "W/\"27-zevBYWXAWjjuzXRjxNLLRyVZ7QM\""
            },
            {
              "key": "Date",
              "value": "Tue, 29 Jul 2025 15:27:07 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 39
        },
        "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response headers indicate SSE",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response headers indicate SSE",
              "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
              "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 932
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "63f5089d6fd02906ce2997a7c9efa585",
          "id": "c3a205c9-29b7-43f5-8b0f-3800b2a91734",
          "timestamp": 1753802826971,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c94ab4df-a020-4ed2-bd45-4cb8be044401",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "edea99a7-4202-41b6-93aa-6aeaa889e05a",
          "scriptId": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
          "execution": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "46064d093507c0d4645d67b1b46d48e8",
          "id": "b90437e6-6292-4615-996f-2fb071d950a8",
          "timestamp": 1753802826977,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
          "name": "Upload Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "collection",
                  "type": "file",
                  "src": "{{testCollectionContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid collection",
                  "const testCollection = {",
                  "    \"info\": {",
                  "        \"_postman_id\": \"test-\" + Date.now(),",
                  "        \"name\": \"Test Collection\",",
                  "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                  "    },",
                  "    \"item\": [",
                  "        {",
                  "            \"name\": \"Test Request\",",
                  "            \"request\": {",
                  "                \"method\": \"GET\",",
                  "                \"url\": \"https://example.com\"",
                  "            }",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                ],
                "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c94ab4df-a020-4ed2-bd45-4cb8be044401",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "edea99a7-4202-41b6-93aa-6aeaa889e05a",
          "scriptId": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
          "execution": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid collection JSON",
          "message": "expected [ { …(4) } ] to have property 'info'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'info'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "7b7af146ef773fbc28a338f861c32c7c",
          "id": "57e400ea-38c8-452c-bc4e-f289c08e6c33",
          "timestamp": 1753802827104,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "031bfaad-7f10-4798-b853-28f6736d1848",
          "name": "Get Specific Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid collection JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('item');",
                  "});"
                ],
                "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "335ebe47-d248-4ce7-91a1-3af0aa6e5186",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "106b66ec-5715-482f-a5e6-29edd7edce7e",
          "scriptId": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
          "execution": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "13f3ce4e-aac6-4040-8f3e-64dda449499d",
          "timestamp": 1753802827201,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f093bb34-b990-43fd-af33-9bef686f2f41",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6c5d7ff6-5dd7-4ef5-989f-c193d8275685",
          "scriptId": "396828ee-a5de-4cb7-b053-fe1882914b15",
          "execution": "49291043-4ca2-40ef-979c-93a416b60e49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7036f88a4a44402bd7e60eab9a26d6c9",
          "id": "6a1f880f-3340-4c9e-a7b1-f3d01da35870",
          "timestamp": 1753802827204,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
          "name": "Update Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f093bb34-b990-43fd-af33-9bef686f2f41",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6c5d7ff6-5dd7-4ef5-989f-c193d8275685",
          "scriptId": "396828ee-a5de-4cb7-b053-fe1882914b15",
          "execution": "49291043-4ca2-40ef-979c-93a416b60e49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "91a09d62-830b-49d6-8eb6-8406cdda3198",
          "timestamp": 1753802827303,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5b7ea8d-349a-4297-9f93-470a7d8c4be9",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e4e56fc5-d51e-4057-93cf-88523801c493",
          "scriptId": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
          "execution": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d2f339d7dbd0c03b86a114a828087760",
          "id": "0f66b095-9108-40a1-8059-173d53da906c",
          "timestamp": 1753802827304,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
          "name": "Delete Collection",
          "request": {
            "url": {
              "path": [
                "collections",
                "{{uploaded_collection_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
              }
            }
          ]
        },
        "parent": {
          "id": "75b2b037-fdfc-4059-bc59-baf510e863a3",
          "name": "Collections API",
          "item": [
            {
              "id": "6555866f-6bfc-4c65-834d-b3d0901d7837",
              "name": "Get All Collections",
              "request": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0828eb70-e6ef-45eb-a7e2-96ee9a26ed3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "// Save collection count for later tests",
                      "pm.collectionVariables.set(\"initial_collection_count\", pm.response.json().length);"
                    ],
                    "_lastExecutionId": "0adce037-9358-48c2-8751-d7eef1bef640"
                  }
                }
              ]
            },
            {
              "id": "b949c5c9-7bc4-41ba-ad54-7caf796480c2",
              "name": "Upload Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "collection",
                      "type": "file",
                      "src": "{{testCollectionContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "38fde31e-d07d-407a-9640-ee85642720fa",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid collection",
                      "const testCollection = {",
                      "    \"info\": {",
                      "        \"_postman_id\": \"test-\" + Date.now(),",
                      "        \"name\": \"Test Collection\",",
                      "        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"",
                      "    },",
                      "    \"item\": [",
                      "        {",
                      "            \"name\": \"Test Request\",",
                      "            \"request\": {",
                      "                \"method\": \"GET\",",
                      "                \"url\": \"https://example.com\"",
                      "            }",
                      "        }",
                      "    ]",
                      "};",
                      "",
                      "pm.variables.set(\"testCollectionContent\", JSON.stringify(testCollection));"
                    ],
                    "_lastExecutionId": "84c247f8-d34e-422e-9903-f1317d7b29a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "51c12f0b-fde3-4d3c-bfd1-87310a46d937",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_collection_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "42de5464-1430-4e77-8acb-5d8a8b6f9699"
                  }
                }
              ]
            },
            {
              "id": "031bfaad-7f10-4798-b853-28f6736d1848",
              "name": "Get Specific Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50f280f7-feb1-44a6-9cbf-57734c4bb69c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid collection JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('info');",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "});"
                    ],
                    "_lastExecutionId": "5739a836-a93c-41db-95fc-1ea9c58df7cf"
                  }
                }
              ]
            },
            {
              "id": "0e013322-15e8-4933-bef4-dc6ebd637d23",
              "name": "Update Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"info\": {\n        \"_postman_id\": \"test-updated\",\n        \"name\": \"Updated Test Collection\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n    },\n    \"item\": [\n        {\n            \"name\": \"Updated Test Request\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"https://example.com/api\"\n            }\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396828ee-a5de-4cb7-b053-fe1882914b15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "49291043-4ca2-40ef-979c-93a416b60e49"
                  }
                }
              ]
            },
            {
              "id": "5ad57136-42c0-4e7a-8247-acab99998eba",
              "name": "Delete Collection",
              "request": {
                "url": {
                  "path": [
                    "collections",
                    "{{uploaded_collection_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5b7ea8d-349a-4297-9f93-470a7d8c4be9",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e4e56fc5-d51e-4057-93cf-88523801c493",
          "scriptId": "56f28e6f-ce6e-423e-8bd7-35fca3d9b667",
          "execution": "6f25f7ea-1915-4335-b432-e7c7e7502b0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "8cb9304106fb962ca9e8cb3646c1d6ef",
          "id": "61e5f013-f4e6-4eb6-8107-ae4d00b431d7",
          "timestamp": 1753802827506,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0ffab1c-811a-43cf-ac2b-37d4b016de16",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b6448885-d8cf-410a-8f93-2892a37952b2",
          "scriptId": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
          "execution": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms upload",
          "message": "expected { error: 'No file uploaded' } to have property 'message'",
          "stack": "AssertionError: expected { error: 'No file uploaded' } to have property 'message'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "a5eadbbaddf7057a07e38b97e74398e0",
          "id": "a1cf6868-94c5-4fce-87e0-acc2f0295da4",
          "timestamp": 1753802827508,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
          "name": "Upload Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "upload"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "environment",
                  "type": "file",
                  "src": "{{testEnvironmentContent}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                "type": "text/javascript",
                "exec": [
                  "// Create a minimal valid environment",
                  "const testEnvironment = {",
                  "    \"id\": \"test-env-\" + Date.now(),",
                  "    \"name\": \"Test Environment\",",
                  "    \"values\": [",
                  "        {",
                  "            \"key\": \"test_var\",",
                  "            \"value\": \"test_value\",",
                  "            \"enabled\": true",
                  "        }",
                  "    ],",
                  "    \"_postman_variable_scope\": \"environment\"",
                  "};",
                  "",
                  "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                ],
                "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms upload\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Save filename for later tests",
                  "if (pm.response.json().filename) {",
                  "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                  "}"
                ],
                "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0ffab1c-811a-43cf-ac2b-37d4b016de16",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b6448885-d8cf-410a-8f93-2892a37952b2",
          "scriptId": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
          "execution": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is valid environment JSON",
          "message": "expected [ { …(4) } ] to have property 'name'",
          "stack": "AssertionError: expected [ { …(4) } ] to have property 'name'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7df9f205c516f1042fa18e4e11bec77a",
          "id": "1fb9c881-328d-4f54-82c3-3e9d8ea8e9f0",
          "timestamp": 1753802827590,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
          "name": "Get Specific Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid environment JSON\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('values');",
                  "    pm.expect(jsonData.values).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a27c8666-deaa-4a67-8de8-09399add186b",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15fbf55b-e1a8-4e81-bba4-0cce5ef816d7",
          "scriptId": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
          "execution": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "51f62f97358e839673dfe407246b1342",
          "id": "c90d0dc9-7b03-41d4-8262-e4cb2ad0bf57",
          "timestamp": 1753802827683,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4b38fcb-c98b-4787-bae8-22c0fdc1f6ec",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ad129d15-e802-4155-a918-262b0a13b181",
          "scriptId": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
          "execution": "78f7c625-5806-4b1c-be5e-be348c200c53"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms update",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d06ee42f55ae9a2a884c04d8f23271b7",
          "id": "5a07ffc6-d43a-4095-ae2b-9f397dddb1f9",
          "timestamp": 1753802827685,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
          "name": "Update Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms update\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated successfully');",
                  "});"
                ],
                "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4b38fcb-c98b-4787-bae8-22c0fdc1f6ec",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ad129d15-e802-4155-a918-262b0a13b181",
          "scriptId": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
          "execution": "78f7c625-5806-4b1c-be5e-be348c200c53"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8d3dd5545e58f581c4635dfe9af03c35",
          "id": "55b88400-431d-44e1-a23d-b514de32a509",
          "timestamp": 1753802827751,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1beb983f-3aae-4afc-94c1-d1de29a97208",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ed1f2157-21ae-479f-93f9-1ca23a822613",
          "scriptId": "075713a7-cea3-47c0-af51-7b263d38c2b6",
          "execution": "97f919fe-15c8-4fcc-a0fd-389215782507"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response confirms deletion",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "949aaae4b4c63428fbeba46992d75766",
          "id": "0710effd-6036-4f27-856e-71fddd9920b3",
          "timestamp": 1753802827752,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
          "name": "Delete Environment",
          "request": {
            "url": {
              "path": [
                "environments",
                "{{uploaded_environment_filename}}"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
              }
            }
          ]
        },
        "parent": {
          "id": "8004bd4f-87d2-48d2-835c-42cdfc304e75",
          "name": "Environments API",
          "item": [
            {
              "id": "63ac51e9-06c0-4e20-bdcf-cd947a5d1557",
              "name": "Get All Environments",
              "request": {
                "url": {
                  "path": [
                    "environments"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c68e176d-09c6-4234-885e-31f1730cb5f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "896f2d65-82ec-4faf-8954-97df1283516e"
                  }
                }
              ]
            },
            {
              "id": "0a5ee831-0c7d-49fb-91fa-f736d51f1550",
              "name": "Upload Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "environment",
                      "type": "file",
                      "src": "{{testEnvironmentContent}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a5c97a8-7c53-46e2-8e89-5f38045fa755",
                    "type": "text/javascript",
                    "exec": [
                      "// Create a minimal valid environment",
                      "const testEnvironment = {",
                      "    \"id\": \"test-env-\" + Date.now(),",
                      "    \"name\": \"Test Environment\",",
                      "    \"values\": [",
                      "        {",
                      "            \"key\": \"test_var\",",
                      "            \"value\": \"test_value\",",
                      "            \"enabled\": true",
                      "        }",
                      "    ],",
                      "    \"_postman_variable_scope\": \"environment\"",
                      "};",
                      "",
                      "pm.variables.set(\"testEnvironmentContent\", JSON.stringify(testEnvironment));"
                    ],
                    "_lastExecutionId": "8d7d038c-69d4-4dce-87d4-4f7803723b8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "be1a0599-656a-41e6-bf9b-cdeb2b279a0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms upload\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('filename');",
                      "    pm.expect(jsonData.message).to.include('uploaded successfully');",
                      "});",
                      "",
                      "// Save filename for later tests",
                      "if (pm.response.json().filename) {",
                      "    pm.collectionVariables.set(\"uploaded_environment_filename\", pm.response.json().filename);",
                      "}"
                    ],
                    "_lastExecutionId": "f9f3a697-1fc9-49a0-8910-d3fe6d5b8d63"
                  }
                }
              ]
            },
            {
              "id": "44e1f1eb-ff85-482e-a2be-c14b7e0427a4",
              "name": "Get Specific Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7f8dc12-dffa-493b-bd53-86f1750cd96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is valid environment JSON\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('values');",
                      "    pm.expect(jsonData.values).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "e66a6a0f-2ad0-4635-8d53-3d3fbe26aa9f"
                  }
                }
              ]
            },
            {
              "id": "6dee2927-8744-4093-aab7-72c267a7aa0f",
              "name": "Update Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"test-env-updated\",\n    \"name\": \"Updated Test Environment\",\n    \"values\": [\n        {\n            \"key\": \"test_var\",\n            \"value\": \"updated_value\",\n            \"enabled\": true\n        },\n        {\n            \"key\": \"new_var\",\n            \"value\": \"new_value\",\n            \"enabled\": true\n        }\n    ],\n    \"_postman_variable_scope\": \"environment\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83fed4a8-f42c-46d7-bd5f-3a9a92e22f04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms update\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "78f7c625-5806-4b1c-be5e-be348c200c53"
                  }
                }
              ]
            },
            {
              "id": "9d84de26-fd5d-4877-af50-11effd81a1f1",
              "name": "Delete Environment",
              "request": {
                "url": {
                  "path": [
                    "environments",
                    "{{uploaded_environment_filename}}"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "075713a7-cea3-47c0-af51-7b263d38c2b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response confirms deletion\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "97f919fe-15c8-4fcc-a0fd-389215782507"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1beb983f-3aae-4afc-94c1-d1de29a97208",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ed1f2157-21ae-479f-93f9-1ca23a822613",
          "scriptId": "075713a7-cea3-47c0-af51-7b263d38c2b6",
          "execution": "97f919fe-15c8-4fcc-a0fd-389215782507"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5aee59275ad77079b548135c9cd9ff77",
          "id": "fff15cbe-6cdd-4142-aa8b-41f90c38fd9c",
          "timestamp": 1753802827853,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
              }
            }
          ]
        },
        "parent": {
          "id": "3236bc8b-9e8d-42a1-be3e-e1d18d044f37",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
                  }
                }
              ]
            },
            {
              "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cc85ae91-cf89-4bc2-b30e-6e25763cf2e5",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f8e08d72-8c2d-4a49-aded-d9d7a4a4f1cf",
          "scriptId": "ed37719e-b9f7-427a-934c-7c9000755ff1",
          "execution": "6fa329cb-651a-4110-8b23-e2781c61c263"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "6b1b7c09d4201b021e9a59d1ea55f105",
          "id": "cf61eed9-53df-44a7-a7f1-ccbc79fdbbd6",
          "timestamp": 1753802827854,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
          "name": "Run Collection (Simple)",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
              }
            }
          ]
        },
        "parent": {
          "id": "3236bc8b-9e8d-42a1-be3e-e1d18d044f37",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
                  }
                }
              ]
            },
            {
              "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cc85ae91-cf89-4bc2-b30e-6e25763cf2e5",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f8e08d72-8c2d-4a49-aded-d9d7a4a4f1cf",
          "scriptId": "ed37719e-b9f7-427a-934c-7c9000755ff1",
          "execution": "6fa329cb-651a-4110-8b23-e2781c61c263"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6e2b98e8ac16282d2c9d967bf41d9711",
          "id": "88f6eb27-a2f1-47cb-8edb-74174be32e89",
          "timestamp": 1753802827938,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
              }
            }
          ]
        },
        "parent": {
          "id": "3236bc8b-9e8d-42a1-be3e-e1d18d044f37",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
                  }
                }
              ]
            },
            {
              "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "47d47110-4c10-4710-b047-16a46bbf125c",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04cc508f-aaf0-4239-84a3-0c9791c363eb",
          "scriptId": "2a6046b4-f108-441a-8f0b-70440c634c15",
          "execution": "e65293e4-aa98-4415-9a3f-35b998700520"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response headers indicate SSE",
          "message": "expected 'application/json; charset=utf-8' to include 'text/event-stream'",
          "stack": "AssertionError: expected 'application/json; charset=utf-8' to include 'text/event-stream'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "14a8181d7cde2a146a8dde2c5ab7afd2",
          "id": "8a7c9f32-7912-4f8a-885b-ac3946bdcd6a",
          "timestamp": 1753802827940,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
          "name": "Run Collection with Environment",
          "request": {
            "url": {
              "path": [
                "newman",
                "run"
              ],
              "host": [
                "{{base_url}}{{api_prefix}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response headers indicate SSE\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ],
                "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
              }
            }
          ]
        },
        "parent": {
          "id": "3236bc8b-9e8d-42a1-be3e-e1d18d044f37",
          "name": "Newman Runner API",
          "item": [
            {
              "id": "5dec7c56-1f4f-4fc2-b4fd-09e2a4068549",
              "name": "Run Collection (Simple)",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed37719e-b9f7-427a-934c-7c9000755ff1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Note: This endpoint returns SSE stream, so we can't parse JSON",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "6fa329cb-651a-4110-8b23-e2781c61c263"
                  }
                }
              ]
            },
            {
              "id": "6cc3d8f9-1c97-47d2-8fd6-87d134d6d841",
              "name": "Run Collection with Environment",
              "request": {
                "url": {
                  "path": [
                    "newman",
                    "run"
                  ],
                  "host": [
                    "{{base_url}}{{api_prefix}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"collectionPath\": \"newman-at-api-tests.json\",\n    \"environmentPath\": \"newman-at-local.json\",\n    \"iterationCount\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a6046b4-f108-441a-8f0b-70440c634c15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response headers indicate SSE\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                      "});"
                    ],
                    "_lastExecutionId": "e65293e4-aa98-4415-9a3f-35b998700520"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "47d47110-4c10-4710-b047-16a46bbf125c",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04cc508f-aaf0-4239-84a3-0c9791c363eb",
          "scriptId": "2a6046b4-f108-441a-8f0b-70440c634c15",
          "execution": "e65293e4-aa98-4415-9a3f-35b998700520"
        }
      }
    ],
    "error": null
  }
}